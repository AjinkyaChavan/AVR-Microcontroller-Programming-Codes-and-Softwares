
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001d  00800060  00800060  00000c6a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000039c  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e91  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000034f  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c89  00000000  00000000  00002206  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002e0  00000000  00000000  00002e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003c4  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005c6  00000000  00000000  00003534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00003afa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 37       	cpi	r26, 0x7D	; 125
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 74 03 	call	0x6e8	; 0x6e8 <main>
  74:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <port_init>:
unsigned char sensorbyte=0;

//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
  80:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
  82:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
  84:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
  86:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
  88:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
  8a:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
  8c:	11 ba       	out	0x11, r1	; 17
}
  8e:	08 95       	ret

00000090 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
  90:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
  92:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
  94:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
  96:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
  98:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
  9a:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
  9c:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
  9e:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
  a0:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;
  a6:	8f e8       	ldi	r24, 0x8F	; 143
  a8:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
  aa:	82 ea       	ldi	r24, 0xA2	; 162
  ac:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
  ae:	89 e1       	ldi	r24, 0x19	; 25
  b0:	8e bd       	out	0x2e, r24	; 46
}
  b2:	08 95       	ret

000000b4 <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
  b4:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
  b6:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
  bc:	87 e8       	ldi	r24, 0x87	; 135
  be:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	88 b9       	out	0x08, r24	; 8
}
  c4:	08 95       	ret

000000c6 <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
  c6:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
  c8:	87 70       	andi	r24, 0x07	; 7
  ca:	80 66       	ori	r24, 0x60	; 96
  cc:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
  ce:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
  d0:	36 99       	sbic	0x06, 6	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
  d4:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
  d6:	08 95       	ret

000000d8 <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
  d8:	ac 01       	movw	r20, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	60 e9       	ldi	r22, 0x90	; 144
  de:	71 e0       	ldi	r23, 0x01	; 1
  e0:	0c c0       	rjmp	.+24     	; 0xfa <delay_sec+0x22>
  e2:	fb 01       	movw	r30, r22
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	24 30       	cpi	r18, 0x04	; 4
  f0:	19 f0       	breq	.+6      	; 0xf8 <delay_sec+0x20>
  f2:	84 ec       	ldi	r24, 0xC4	; 196
  f4:	99 e0       	ldi	r25, 0x09	; 9
  f6:	f5 cf       	rjmp	.-22     	; 0xe2 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
  f8:	3f 5f       	subi	r19, 0xFF	; 255
  fa:	83 2f       	mov	r24, r19
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	84 17       	cp	r24, r20
 100:	95 07       	cpc	r25, r21
 102:	14 f4       	brge	.+4      	; 0x108 <delay_sec+0x30>
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <delay_sec+0x1a>
 108:	08 95       	ret

0000010a <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
 10a:	af 92       	push	r10
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
	_delay_ms(n);
 11a:	aa 27       	eor	r26, r26
 11c:	97 fd       	sbrc	r25, 7
 11e:	a0 95       	com	r26
 120:	ba 2f       	mov	r27, r26
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	0e 94 a6 04 	call	0x94c	; 0x94c <__floatsisf>
 12a:	5b 01       	movw	r10, r22
 12c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	4a e7       	ldi	r20, 0x7A	; 122
 134:	55 e4       	ldi	r21, 0x45	; 69
 136:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 13a:	7b 01       	movw	r14, r22
 13c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e8       	ldi	r20, 0x80	; 128
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	0e 94 0c 04 	call	0x818	; 0x818 <__cmpsf2>
 14a:	88 23       	and	r24, r24
 14c:	1c f4       	brge	.+6      	; 0x154 <delay_millisec+0x4a>
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	24 c0       	rjmp	.+72     	; 0x19c <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
 154:	c8 01       	movw	r24, r16
 156:	b7 01       	movw	r22, r14
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	3f ef       	ldi	r19, 0xFF	; 255
 15c:	4f e7       	ldi	r20, 0x7F	; 127
 15e:	57 e4       	ldi	r21, 0x47	; 71
 160:	0e 94 56 05 	call	0xaac	; 0xaac <__gesf2>
 164:	18 16       	cp	r1, r24
 166:	b4 f4       	brge	.+44     	; 0x194 <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 168:	c6 01       	movw	r24, r12
 16a:	b5 01       	movw	r22, r10
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e2       	ldi	r20, 0x20	; 32
 172:	51 e4       	ldi	r21, 0x41	; 65
 174:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 178:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fixunssfsi>
 17c:	80 e9       	ldi	r24, 0x90	; 144
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	05 c0       	rjmp	.+10     	; 0x18c <delay_millisec+0x82>
 182:	fc 01       	movw	r30, r24
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 188:	61 50       	subi	r22, 0x01	; 1
 18a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	61 15       	cp	r22, r1
 18e:	71 05       	cpc	r23, r1
 190:	c1 f7       	brne	.-16     	; 0x182 <delay_millisec+0x78>
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 194:	c8 01       	movw	r24, r16
 196:	b7 01       	movw	r22, r14
 198:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fixunssfsi>
 19c:	cb 01       	movw	r24, r22
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <delay_millisec+0x94>
}
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	bf 90       	pop	r11
 1b0:	af 90       	pop	r10
 1b2:	08 95       	ret

000001b4 <delay_microsec>:

void delay_microsec(int n)
{
 1b4:	af 92       	push	r10
 1b6:	bf 92       	push	r11
 1b8:	cf 92       	push	r12
 1ba:	df 92       	push	r13
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
	_delay_us(n);
 1c4:	aa 27       	eor	r26, r26
 1c6:	97 fd       	sbrc	r25, 7
 1c8:	a0 95       	com	r26
 1ca:	ba 2f       	mov	r27, r26
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	0e 94 a6 04 	call	0x94c	; 0x94c <__floatsisf>
 1d4:	5b 01       	movw	r10, r22
 1d6:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 1d8:	2b ea       	ldi	r18, 0xAB	; 171
 1da:	3a ea       	ldi	r19, 0xAA	; 170
 1dc:	4a ea       	ldi	r20, 0xAA	; 170
 1de:	50 e4       	ldi	r21, 0x40	; 64
 1e0:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 1e4:	7b 01       	movw	r14, r22
 1e6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e8       	ldi	r20, 0x80	; 128
 1ee:	5f e3       	ldi	r21, 0x3F	; 63
 1f0:	0e 94 0c 04 	call	0x818	; 0x818 <__cmpsf2>
 1f4:	88 23       	and	r24, r24
 1f6:	14 f4       	brge	.+4      	; 0x1fc <delay_microsec+0x48>
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	54 c0       	rjmp	.+168    	; 0x2a4 <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
 1fc:	c8 01       	movw	r24, r16
 1fe:	b7 01       	movw	r22, r14
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4f e7       	ldi	r20, 0x7F	; 127
 206:	53 e4       	ldi	r21, 0x43	; 67
 208:	0e 94 56 05 	call	0xaac	; 0xaac <__gesf2>
 20c:	18 16       	cp	r1, r24
 20e:	0c f0       	brlt	.+2      	; 0x212 <delay_microsec+0x5e>
 210:	45 c0       	rjmp	.+138    	; 0x29c <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
 212:	c6 01       	movw	r24, r12
 214:	b5 01       	movw	r22, r10
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	4a e7       	ldi	r20, 0x7A	; 122
 21c:	54 e4       	ldi	r21, 0x44	; 68
 21e:	0e 94 10 04 	call	0x820	; 0x820 <__divsf3>
 222:	5b 01       	movw	r10, r22
 224:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	4a e7       	ldi	r20, 0x7A	; 122
 22c:	55 e4       	ldi	r21, 0x45	; 69
 22e:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 232:	7b 01       	movw	r14, r22
 234:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e8       	ldi	r20, 0x80	; 128
 23c:	5f e3       	ldi	r21, 0x3F	; 63
 23e:	0e 94 0c 04 	call	0x818	; 0x818 <__cmpsf2>
 242:	88 23       	and	r24, r24
 244:	1c f4       	brge	.+6      	; 0x24c <delay_microsec+0x98>
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	24 c0       	rjmp	.+72     	; 0x294 <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
 24c:	c8 01       	movw	r24, r16
 24e:	b7 01       	movw	r22, r14
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	3f ef       	ldi	r19, 0xFF	; 255
 254:	4f e7       	ldi	r20, 0x7F	; 127
 256:	57 e4       	ldi	r21, 0x47	; 71
 258:	0e 94 56 05 	call	0xaac	; 0xaac <__gesf2>
 25c:	18 16       	cp	r1, r24
 25e:	b4 f4       	brge	.+44     	; 0x28c <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 260:	c6 01       	movw	r24, r12
 262:	b5 01       	movw	r22, r10
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e2       	ldi	r20, 0x20	; 32
 26a:	51 e4       	ldi	r21, 0x41	; 65
 26c:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 270:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fixunssfsi>
 274:	80 e9       	ldi	r24, 0x90	; 144
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	05 c0       	rjmp	.+10     	; 0x284 <delay_microsec+0xd0>
 27a:	fc 01       	movw	r30, r24
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	61 50       	subi	r22, 0x01	; 1
 282:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	61 15       	cp	r22, r1
 286:	71 05       	cpc	r23, r1
 288:	c1 f7       	brne	.-16     	; 0x27a <delay_microsec+0xc6>
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 28c:	c8 01       	movw	r24, r16
 28e:	b7 01       	movw	r22, r14
 290:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fixunssfsi>
 294:	cb 01       	movw	r24, r22
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <delay_microsec+0xe2>
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 29c:	c8 01       	movw	r24, r16
 29e:	b7 01       	movw	r22, r14
 2a0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a4:	6a 95       	dec	r22
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <delay_microsec+0xf0>
}
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	bf 90       	pop	r11
 2b6:	af 90       	pop	r10
 2b8:	08 95       	ret

000002ba <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
sensorbyte=0;
 2c4:	10 92 60 00 	sts	0x0060, r1
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]>threshold[i])
	  sensorbyte|=(1<<i);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	e8 2e       	mov	r14, r24
 2d0:	f1 2c       	mov	r15, r1
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
	  if(temp[i]>threshold[i])
 2d8:	fe 01       	movw	r30, r28
 2da:	ef 59       	subi	r30, 0x9F	; 159
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	90 81       	ld	r25, Z
 2e0:	98 17       	cp	r25, r24
 2e2:	60 f4       	brcc	.+24     	; 0x2fc <check_sensors+0x42>
	  sensorbyte|=(1<<i);
 2e4:	97 01       	movw	r18, r14
 2e6:	0c 2e       	mov	r0, r28
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <check_sensors+0x34>
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <check_sensors+0x30>
 2f2:	80 91 60 00 	lds	r24, 0x0060
 2f6:	82 2b       	or	r24, r18
 2f8:	80 93 60 00 	sts	0x0060, r24
 2fc:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
 2fe:	c4 30       	cpi	r28, 0x04	; 4
 300:	d1 05       	cpc	r29, r1
 302:	39 f7       	brne	.-50     	; 0x2d2 <check_sensors+0x18>
	  temp[i]=adc_start(i);
	  if(temp[i]>threshold[i])
	  sensorbyte|=(1<<i);
	 
	 } 
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <calibrate_black>:
 
 //CALIBRATE FOR BLACK SURFACE
 void calibrate_black(void)
{
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	c9 e6       	ldi	r28, 0x69	; 105
 31a:	d0 e0       	ldi	r29, 0x00	; 0
 31c:	00 e0       	ldi	r16, 0x00	; 0
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
 31e:	80 2f       	mov	r24, r16
 320:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 324:	88 83       	st	Y, r24
 326:	10 e0       	ldi	r17, 0x00	; 0
		  
		  for(i=0;i<10;i++)
		 {
			  temp[i]=adc_start(j);
 328:	80 2f       	mov	r24, r16
 32a:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 32e:	98 2f       	mov	r25, r24
			  
			  if(temp[i]>max[j])
 330:	88 81       	ld	r24, Y
 332:	89 17       	cp	r24, r25
 334:	08 f4       	brcc	.+2      	; 0x338 <calibrate_black+0x28>
			  {
			  max[j]=temp[i];
 336:	98 83       	st	Y, r25

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
		  
		  for(i=0;i<10;i++)
 338:	1f 5f       	subi	r17, 0xFF	; 255
 33a:	1a 30       	cpi	r17, 0x0A	; 10
 33c:	a9 f7       	brne	.-22     	; 0x328 <calibrate_black+0x18>
 //CALIBRATE FOR BLACK SURFACE
 void calibrate_black(void)
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	04 30       	cpi	r16, 0x04	; 4
 344:	61 f7       	brne	.-40     	; 0x31e <calibrate_black+0xe>
		 }
	 
	}

		
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	08 95       	ret

00000350 <calibrate_white>:

//CALIBRATE FOR WHITE SURFACE
void calibrate_white(void)
{
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	c7 e7       	ldi	r28, 0x77	; 119
 35a:	d0 e0       	ldi	r29, 0x00	; 0
 35c:	00 e0       	ldi	r16, 0x00	; 0

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
 35e:	80 2f       	mov	r24, r16
 360:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 364:	88 83       	st	Y, r24
 366:	10 e0       	ldi	r17, 0x00	; 0
		  
		  for(i=0;i<10;i++)
		 {
			  temp[i]=adc_start(j);
 368:	80 2f       	mov	r24, r16
 36a:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 36e:	98 2f       	mov	r25, r24
			  
			 if(temp[i]<min[j])
 370:	88 81       	ld	r24, Y
 372:	98 17       	cp	r25, r24
 374:	08 f4       	brcc	.+2      	; 0x378 <calibrate_white+0x28>
			  {
			  min[j]=temp[i];
 376:	98 83       	st	Y, r25
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
		  
		  for(i=0;i<10;i++)
 378:	1f 5f       	subi	r17, 0xFF	; 255
 37a:	1a 30       	cpi	r17, 0x0A	; 10
 37c:	a9 f7       	brne	.-22     	; 0x368 <calibrate_white+0x18>
void calibrate_white(void)
{

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
 37e:	0f 5f       	subi	r16, 0xFF	; 255
 380:	21 96       	adiw	r28, 0x01	; 1
 382:	04 30       	cpi	r16, 0x04	; 4
 384:	61 f7       	brne	.-40     	; 0x35e <calibrate_white+0xe>
		 }
	 
	}

		
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
 39a:	1f ef       	ldi	r17, 0xFF	; 255
 39c:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
 39e:	84 e6       	ldi	r24, 0x64	; 100
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
		LED=0x00;
 3a6:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
 3a8:	84 e6       	ldi	r24, 0x64	; 100
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	c5 30       	cpi	r28, 0x05	; 5
 3b4:	d1 05       	cpc	r29, r1
 3b6:	91 f7       	brne	.-28     	; 0x39c <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	08 95       	ret

000003c0 <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
 3c0:	9b bd       	out	0x2b, r25	; 43
 3c2:	8a bd       	out	0x2a, r24	; 42
}
 3c4:	08 95       	ret

000003c6 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
 3c6:	99 bd       	out	0x29, r25	; 41
 3c8:	88 bd       	out	0x28, r24	; 40
}
 3ca:	08 95       	ret

000003cc <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 3cc:	87 b3       	in	r24, 0x17	; 23
 3ce:	80 7f       	andi	r24, 0xF0	; 240
 3d0:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
 3d2:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
 3d4:	c5 98       	cbi	0x18, 5	; 24
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	8a 95       	dec	r24
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{
		SET_E();
 3dc:	22 e0       	ldi	r18, 0x02	; 2
 3de:	35 e0       	ldi	r19, 0x05	; 5
 3e0:	c7 9a       	sbi	0x18, 7	; 24
 3e2:	82 2f       	mov	r24, r18
 3e4:	8a 95       	dec	r24
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 3e8:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 3ea:	82 95       	swap	r24
 3ec:	80 7f       	andi	r24, 0xF0	; 240
 3ee:	92 2f       	mov	r25, r18
 3f0:	9a 95       	dec	r25
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
 3f4:	c7 98       	cbi	0x18, 7	; 24
 3f6:	93 2f       	mov	r25, r19
 3f8:	9a 95       	dec	r25
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
 3fc:	c7 9a       	sbi	0x18, 7	; 24
 3fe:	92 2f       	mov	r25, r18
 400:	9a 95       	dec	r25
 402:	f1 f7       	brne	.-4      	; 0x400 <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 404:	96 b3       	in	r25, 0x16	; 22
 406:	92 2f       	mov	r25, r18
 408:	9a 95       	dec	r25
 40a:	f1 f7       	brne	.-4      	; 0x408 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
 40c:	c7 98       	cbi	0x18, 7	; 24
 40e:	93 2f       	mov	r25, r19
 410:	9a 95       	dec	r25
 412:	f1 f7       	brne	.-4      	; 0x410 <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 414:	87 fd       	sbrc	r24, 7
 416:	e4 cf       	rjmp	.-56     	; 0x3e0 <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
 418:	c6 98       	cbi	0x18, 6	; 24
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 41a:	87 b3       	in	r24, 0x17	; 23
 41c:	8f 60       	ori	r24, 0x0F	; 15
 41e:	87 bb       	out	0x17, r24	; 23
}
 420:	08 95       	ret

00000422 <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
 422:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
 424:	66 23       	and	r22, r22
 426:	11 f4       	brne	.+4      	; 0x42c <lcd_byte+0xa>
	CLEAR_RS();
 428:	c5 98       	cbi	0x18, 5	; 24
 42a:	01 c0       	rjmp	.+2      	; 0x42e <lcd_byte+0xc>
else
	SET_RS();
 42c:	c5 9a       	sbi	0x18, 5	; 24
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
 434:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 436:	88 b3       	in	r24, 0x18	; 24
 438:	92 2f       	mov	r25, r18
 43a:	92 95       	swap	r25
 43c:	9f 70       	andi	r25, 0x0F	; 15
 43e:	80 7f       	andi	r24, 0xF0	; 240
 440:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 442:	98 bb       	out	0x18, r25	; 24
 444:	95 e0       	ldi	r25, 0x05	; 5
 446:	89 2f       	mov	r24, r25
 448:	8a 95       	dec	r24
 44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
 44c:	c7 98       	cbi	0x18, 7	; 24
 44e:	89 2f       	mov	r24, r25
 450:	8a 95       	dec	r24
 452:	f1 f7       	brne	.-4      	; 0x450 <lcd_byte+0x2e>
_delay_us(1);
SET_E();
 454:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 456:	88 b3       	in	r24, 0x18	; 24
 458:	2f 70       	andi	r18, 0x0F	; 15
 45a:	80 7f       	andi	r24, 0xF0	; 240
 45c:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
 45e:	88 bb       	out	0x18, r24	; 24
 460:	89 2f       	mov	r24, r25
 462:	8a 95       	dec	r24
 464:	f1 f7       	brne	.-4      	; 0x462 <__stack+0x3>
_delay_us(1);			//tEH
CLEAR_E();
 466:	c7 98       	cbi	0x18, 7	; 24
 468:	9a 95       	dec	r25
 46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
_delay_us(1);			//tEL
lcd_busy_loop();
 46c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_busy_loop>
}
 470:	08 95       	ret

00000472 <lcd_init>:
CLEAR_RW();		//write mode
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
}

void lcd_init(uint8_t style)
{
 472:	1f 93       	push	r17
 474:	18 2f       	mov	r17, r24
 476:	8c e2       	ldi	r24, 0x2C	; 44
 478:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 47a:	20 e9       	ldi	r18, 0x90	; 144
 47c:	31 e0       	ldi	r19, 0x01	; 1
 47e:	f9 01       	movw	r30, r18
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 484:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 486:	d9 f7       	brne	.-10     	; 0x47e <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 488:	87 b3       	in	r24, 0x17	; 23
 48a:	8f 60       	ori	r24, 0x0F	; 15
 48c:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 48e:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 490:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 492:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 494:	88 b3       	in	r24, 0x18	; 24
 496:	80 7f       	andi	r24, 0xF0	; 240
 498:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 49a:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
 49c:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
 49e:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	8a 95       	dec	r24
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
 4a6:	c7 9a       	sbi	0x18, 7	; 24
		LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 4a8:	c1 9a       	sbi	0x18, 1	; 24
 4aa:	85 e0       	ldi	r24, 0x05	; 5
 4ac:	98 2f       	mov	r25, r24
 4ae:	9a 95       	dec	r25
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
 4b2:	c7 98       	cbi	0x18, 7	; 24
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
 4b8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
 4bc:	81 2f       	mov	r24, r17
 4be:	8c 60       	ori	r24, 0x0C	; 12
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
 4c6:	88 e2       	ldi	r24, 0x28	; 40
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
	
}
 4ce:	1f 91       	pop	r17
 4d0:	08 95       	ret

000004d2 <lcd_write_string>:
void lcd_write_string(const char *msg)
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	ec 01       	movw	r28, r24
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
	msg++;
 4e0:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
	
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
 4e2:	88 81       	ld	r24, Y
 4e4:	88 23       	and	r24, r24
 4e6:	c9 f7       	brne	.-14     	; 0x4da <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <lcd_write_int+0xe>
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <lcd_write_int+0x10>
 4fe:	0f 92       	push	r0
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	9c 01       	movw	r18, r24
 506:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
 508:	fe 01       	movw	r30, r28
 50a:	31 96       	adiw	r30, 0x01	; 1
 50c:	85 e0       	ldi	r24, 0x05	; 5
 50e:	df 01       	movw	r26, r30
 510:	1d 92       	st	X+, r1
 512:	8a 95       	dec	r24
 514:	e9 f7       	brne	.-6      	; 0x510 <lcd_write_int+0x22>
 516:	fe 01       	movw	r30, r28
 518:	35 96       	adiw	r30, 0x05	; 5
 51a:	0d c0       	rjmp	.+26     	; 0x536 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 51c:	c9 01       	movw	r24, r18
 51e:	6a e0       	ldi	r22, 0x0A	; 10
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divmodhi4>
 526:	80 83       	st	Z, r24
	val=val/10;
 528:	c9 01       	movw	r24, r18
 52a:	6a e0       	ldi	r22, 0x0A	; 10
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divmodhi4>
 532:	9b 01       	movw	r18, r22
 534:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 536:	21 15       	cp	r18, r1
 538:	31 05       	cpc	r19, r1
 53a:	81 f7       	brne	.-32     	; 0x51c <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 53c:	bf ef       	ldi	r27, 0xFF	; 255
 53e:	0f 3f       	cpi	r16, 0xFF	; 255
 540:	1b 07       	cpc	r17, r27
 542:	79 f4       	brne	.+30     	; 0x562 <lcd_write_int+0x74>
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 548:	ae 01       	movw	r20, r28
 54a:	4f 5f       	subi	r20, 0xFF	; 255
 54c:	5f 4f       	sbci	r21, 0xFF	; 255
 54e:	02 c0       	rjmp	.+4      	; 0x554 <lcd_write_int+0x66>
 550:	2f 5f       	subi	r18, 0xFF	; 255
 552:	3f 4f       	sbci	r19, 0xFF	; 255
 554:	fa 01       	movw	r30, r20
 556:	e2 0f       	add	r30, r18
 558:	f3 1f       	adc	r31, r19
 55a:	80 81       	ld	r24, Z
 55c:	88 23       	and	r24, r24
 55e:	c1 f3       	breq	.-16     	; 0x550 <lcd_write_int+0x62>
 560:	04 c0       	rjmp	.+8      	; 0x56a <lcd_write_int+0x7c>
	else
		j=5-field_length;
 562:	25 e0       	ldi	r18, 0x05	; 5
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	20 1b       	sub	r18, r16
 568:	31 0b       	sbc	r19, r17
 56a:	7e 01       	movw	r14, r28
 56c:	08 94       	sec
 56e:	e1 1c       	adc	r14, r1
 570:	f1 1c       	adc	r15, r1
 572:	e2 0e       	add	r14, r18
 574:	f3 1e       	adc	r15, r19
 576:	89 01       	movw	r16, r18
 578:	09 c0       	rjmp	.+18     	; 0x58c <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
 57a:	f7 01       	movw	r30, r14
 57c:	81 91       	ld	r24, Z+
 57e:	7f 01       	movw	r14, r30
 580:	80 5d       	subi	r24, 0xD0	; 208
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
 588:	0f 5f       	subi	r16, 0xFF	; 255
 58a:	1f 4f       	sbci	r17, 0xFF	; 255
 58c:	05 30       	cpi	r16, 0x05	; 5
 58e:	11 05       	cpc	r17, r1
 590:	a4 f3       	brlt	.-24     	; 0x57a <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	cf 91       	pop	r28
 59e:	df 91       	pop	r29
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	08 95       	ret

000005aa <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
 5aa:	88 32       	cpi	r24, 0x28	; 40
 5ac:	30 f4       	brcc	.+12     	; 0x5ba <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
 5ae:	61 11       	cpse	r22, r1
 5b0:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
 5b2:	80 68       	ori	r24, 0x80	; 128
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
 5ba:	08 95       	ret

000005bc <usart_init>:
}

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
 5bc:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
 5be:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
 5c0:	87 e0       	ldi	r24, 0x07	; 7
 5c2:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
 5c4:	87 e6       	ldi	r24, 0x67	; 103
 5c6:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
 5c8:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
 5ca:	88 e9       	ldi	r24, 0x98	; 152
 5cc:	8a b9       	out	0x0a, r24	; 10
}
 5ce:	08 95       	ret

000005d0 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5d0:	5d 9b       	sbis	0x0b, 5	; 11
 5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
 5d4:	8c b9       	out	0x0c, r24	; 12
}
 5d6:	08 95       	ret

000005d8 <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
 5d8:	fc 01       	movw	r30, r24
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5dc:	5d 9b       	sbis	0x0b, 5	; 11
 5de:	fe cf       	rjmp	.-4      	; 0x5dc <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
 5e0:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
 5e2:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 5e4:	80 81       	ld	r24, Z
 5e6:	88 23       	and	r24, r24
 5e8:	c9 f7       	brne	.-14     	; 0x5dc <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
 5ea:	08 95       	ret

000005ec <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5ec:	5d 9b       	sbis	0x0b, 5	; 11
 5ee:	fe cf       	rjmp	.-4      	; 0x5ec <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
 5f0:	8a e0       	ldi	r24, 0x0A	; 10
 5f2:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5f4:	5d 9b       	sbis	0x0b, 5	; 11
 5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
 5f8:	8d e0       	ldi	r24, 0x0D	; 13
 5fa:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
 5fc:	08 95       	ret

000005fe <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
 5fe:	5f 9b       	sbis	0x0b, 7	; 11
 600:	fe cf       	rjmp	.-4      	; 0x5fe <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
 602:	8c b1       	in	r24, 0x0c	; 12
}
 604:	08 95       	ret

00000606 <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
 606:	8f ef       	ldi	r24, 0xFF	; 255
 608:	84 bb       	out	0x14, r24	; 20
}
 60a:	08 95       	ret

0000060c <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
 60c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 60e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 610:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 612:	af 98       	cbi	0x15, 7	; 21
}
 614:	08 95       	ret

00000616 <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
 616:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 618:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 61a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 61c:	af 98       	cbi	0x15, 7	; 21
}
 61e:	08 95       	ret

00000620 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
 620:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 624:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 626:	af 98       	cbi	0x15, 7	; 21
}
 628:	08 95       	ret

0000062a <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
 62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 62c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 62e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 630:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
 632:	08 95       	ret

00000634 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
 634:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 638:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 63a:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
 63c:	08 95       	ret

0000063e <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
 63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 642:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
 644:	af 9a       	sbi	0x15, 7	; 21
}
 646:	08 95       	ret

00000648 <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
 648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 64c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 64e:	af 98       	cbi	0x15, 7	; 21
}
 650:	08 95       	ret

00000652 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
 652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 654:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 658:	af 9a       	sbi	0x15, 7	; 21
}
 65a:	08 95       	ret

0000065c <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
 65c:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 65e:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 662:	af 98       	cbi	0x15, 7	; 21
}
 664:	08 95       	ret

00000666 <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
 666:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 668:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 66c:	af 9a       	sbi	0x15, 7	; 21
}
 66e:	08 95       	ret

00000670 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
 670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 672:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 674:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 676:	af 98       	cbi	0x15, 7	; 21
}
 678:	08 95       	ret

0000067a <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
 67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
 67c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 67e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
 680:	af 9a       	sbi	0x15, 7	; 21
}
 682:	08 95       	ret

00000684 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
 684:	82 b3       	in	r24, 0x12	; 18
 686:	8f 60       	ori	r24, 0x0F	; 15
 688:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
 68a:	81 b3       	in	r24, 0x11	; 17
 68c:	80 7f       	andi	r24, 0xF0	; 240
 68e:	81 bb       	out	0x11, r24	; 17
}
 690:	08 95       	ret

00000692 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
 692:	20 b3       	in	r18, 0x10	; 16
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	20 95       	com	r18
 698:	30 95       	com	r19
 69a:	21 70       	andi	r18, 0x01	; 1
 69c:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 69e:	c9 01       	movw	r24, r18
 6a0:	08 95       	ret

000006a2 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
 6a2:	20 b3       	in	r18, 0x10	; 16
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	36 95       	lsr	r19
 6a8:	27 95       	ror	r18
 6aa:	20 95       	com	r18
 6ac:	30 95       	com	r19
 6ae:	21 70       	andi	r18, 0x01	; 1
 6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6b2:	c9 01       	movw	r24, r18
 6b4:	08 95       	ret

000006b6 <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
 6b6:	20 b3       	in	r18, 0x10	; 16
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	36 95       	lsr	r19
 6bc:	27 95       	ror	r18
 6be:	36 95       	lsr	r19
 6c0:	27 95       	ror	r18
 6c2:	20 95       	com	r18
 6c4:	30 95       	com	r19
 6c6:	21 70       	andi	r18, 0x01	; 1
 6c8:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6ca:	c9 01       	movw	r24, r18
 6cc:	08 95       	ret

000006ce <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
 6ce:	20 b3       	in	r18, 0x10	; 16
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	53 e0       	ldi	r21, 0x03	; 3
 6d4:	36 95       	lsr	r19
 6d6:	27 95       	ror	r18
 6d8:	5a 95       	dec	r21
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <pressed_switch3+0x6>
 6dc:	20 95       	com	r18
 6de:	30 95       	com	r19
 6e0:	21 70       	andi	r18, 0x01	; 1
 6e2:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6e4:	c9 01       	movw	r24, r18
 6e6:	08 95       	ret

000006e8 <main>:
unsigned int necdata;

void main()
{

port_init();
 6e8:	0e 94 3e 00 	call	0x7c	; 0x7c <port_init>
usart_init();
 6ec:	0e 94 de 02 	call	0x5bc	; 0x5bc <usart_init>
lcd_init(none);
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	0e 94 39 02 	call	0x472	; 0x472 <lcd_init>
lcd_clear();
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
pos = 0;
 6fe:	10 92 65 00 	sts	0x0065, r1
last_toggle = -1;
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	80 93 66 00 	sts	0x0066, r24
usart_transmit_char(13);
}
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
 708:	5f 9b       	sbis	0x0b, 7	; 11
 70a:	fe cf       	rjmp	.-4      	; 0x708 <main+0x20>
;
/* Get and return received data from buffer */
return UDR;
 70c:	9c b1       	in	r25, 0x0c	; 12
while(1)
	{
				ch = usart_receive_char(); //loop till character received
 70e:	90 93 7c 00 	sts	0x007C, r25
				if(ch==0x0A) // if received character is <LF> end of line, time to display
 712:	9a 30       	cpi	r25, 0x0A	; 10
 714:	f9 f4       	brne	.+62     	; 0x754 <main+0x6c>
				{
					pos = 0; // buffer position reset for next reading
 716:	10 92 65 00 	sts	0x0065, r1
					
					// extract nec data from serial buffer to 16 bit value
					necdata = ((sbuffer[2]-'0')<<4)|(sbuffer[3]-'0'); // convert data from ASCII to low byte
 71a:	20 91 6f 00 	lds	r18, 0x006F
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	20 53       	subi	r18, 0x30	; 48
 722:	30 40       	sbci	r19, 0x00	; 0
 724:	74 e0       	ldi	r23, 0x04	; 4
 726:	22 0f       	add	r18, r18
 728:	33 1f       	adc	r19, r19
 72a:	7a 95       	dec	r23
 72c:	e1 f7       	brne	.-8      	; 0x726 <main+0x3e>
 72e:	80 91 70 00 	lds	r24, 0x0070
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	c0 97       	sbiw	r24, 0x30	; 48
 736:	28 2b       	or	r18, r24
 738:	39 2b       	or	r19, r25
					necdata |= (((sbuffer[0]-'0')<<12)|(sbuffer[1]-'0'))<<8; // convert data from ASCII to high byte					
 73a:	80 91 6e 00 	lds	r24, 0x006E
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	c0 97       	sbiw	r24, 0x30	; 48
 742:	98 2f       	mov	r25, r24
 744:	88 27       	eor	r24, r24
 746:	82 2b       	or	r24, r18
 748:	93 2b       	or	r25, r19
 74a:	90 93 68 00 	sts	0x0068, r25
 74e:	80 93 67 00 	sts	0x0067, r24
 752:	0a c0       	rjmp	.+20     	; 0x768 <main+0x80>
										
										
				}
				else { //store serial data to buffer
					sbuffer[pos] = ch;
 754:	80 91 65 00 	lds	r24, 0x0065
 758:	e8 2f       	mov	r30, r24
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	e3 59       	subi	r30, 0x93	; 147
 75e:	ff 4f       	sbci	r31, 0xFF	; 255
 760:	90 83       	st	Z, r25
					pos++;
 762:	8f 5f       	subi	r24, 0xFF	; 255
 764:	80 93 65 00 	sts	0x0065, r24
				}
				
				lcd_write_int_xy(0,0,necdata&0x00FF,3);
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lcd_goto_xy>
 770:	80 91 67 00 	lds	r24, 0x0067
 774:	90 91 68 00 	lds	r25, 0x0068
 778:	90 70       	andi	r25, 0x00	; 0
 77a:	63 e0       	ldi	r22, 0x03	; 3
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_write_int>
 782:	c2 cf       	rjmp	.-124    	; 0x708 <main+0x20>

00000784 <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold[i]=eeprom_read_byte(eeprom_addr);
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__eerd_byte_m16>
 78c:	80 93 61 00 	sts	0x0061, r24
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__eerd_byte_m16>
 798:	80 93 62 00 	sts	0x0062, r24
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__eerd_byte_m16>
 7a4:	80 93 63 00 	sts	0x0063, r24
 7a8:	83 e0       	ldi	r24, 0x03	; 3
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__eerd_byte_m16>
 7b0:	80 93 64 00 	sts	0x0064, r24
		eeprom_addr++;
	}
}
 7b4:	08 95       	ret

000007b6 <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	40 e0       	ldi	r20, 0x00	; 0
 7bc:	50 e0       	ldi	r21, 0x00	; 0
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 diff=abs(max[i]-min[i]);	
 7be:	fa 01       	movw	r30, r20
 7c0:	e7 59       	subi	r30, 0x97	; 151
 7c2:	ff 4f       	sbci	r31, 0xFF	; 255
 7c4:	90 81       	ld	r25, Z
		 threshold[i]=max[i]+(diff>>1);
 7c6:	da 01       	movw	r26, r20
 7c8:	af 59       	subi	r26, 0x9F	; 159
 7ca:	bf 4f       	sbci	r27, 0xFF	; 255
 7cc:	29 2f       	mov	r18, r25
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	fa 01       	movw	r30, r20
 7d2:	e9 58       	subi	r30, 0x89	; 137
 7d4:	ff 4f       	sbci	r31, 0xFF	; 255
 7d6:	80 81       	ld	r24, Z
 7d8:	28 1b       	sub	r18, r24
 7da:	31 09       	sbc	r19, r1
 7dc:	37 ff       	sbrs	r19, 7
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <set_threshold+0x30>
 7e0:	30 95       	com	r19
 7e2:	21 95       	neg	r18
 7e4:	3f 4f       	sbci	r19, 0xFF	; 255
 7e6:	82 2f       	mov	r24, r18
 7e8:	86 95       	lsr	r24
 7ea:	89 0f       	add	r24, r25
 7ec:	8c 93       	st	X, r24
 7ee:	4f 5f       	subi	r20, 0xFF	; 255
 7f0:	5f 4f       	sbci	r21, 0xFF	; 255

	unsigned char i,eeprom_addr=0x0000;
	char diff;
	
	
	 for(i=0;i<sensor_num;i++)
 7f2:	44 30       	cpi	r20, 0x04	; 4
 7f4:	51 05       	cpc	r21, r1
 7f6:	19 f7       	brne	.-58     	; 0x7be <set_threshold+0x8>
 7f8:	c0 e0       	ldi	r28, 0x00	; 0
 7fa:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold[i]);
 7fc:	fe 01       	movw	r30, r28
 7fe:	ef 59       	subi	r30, 0x9F	; 159
 800:	ff 4f       	sbci	r31, 0xFF	; 255
 802:	ce 01       	movw	r24, r28
 804:	60 81       	ld	r22, Z
 806:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__eewr_byte_m16>
		 diff=abs(max[i]-min[i]);	
		 threshold[i]=max[i]+(diff>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
 80a:	21 96       	adiw	r28, 0x01	; 1
 80c:	c4 30       	cpi	r28, 0x04	; 4
 80e:	d1 05       	cpc	r29, r1
 810:	a9 f7       	brne	.-22     	; 0x7fc <set_threshold+0x46>
	{
		eeprom_write_byte(eeprom_addr,threshold[i]);
		eeprom_addr++;
	}
	 
}
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	08 95       	ret

00000818 <__cmpsf2>:
 818:	d4 d0       	rcall	.+424    	; 0x9c2 <__fp_cmp>
 81a:	08 f4       	brcc	.+2      	; 0x81e <__cmpsf2+0x6>
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	08 95       	ret

00000820 <__divsf3>:
 820:	0c d0       	rcall	.+24     	; 0x83a <__divsf3x>
 822:	0a c1       	rjmp	.+532    	; 0xa38 <__fp_round>
 824:	02 d1       	rcall	.+516    	; 0xa2a <__fp_pscB>
 826:	40 f0       	brcs	.+16     	; 0x838 <__divsf3+0x18>
 828:	f9 d0       	rcall	.+498    	; 0xa1c <__fp_pscA>
 82a:	30 f0       	brcs	.+12     	; 0x838 <__divsf3+0x18>
 82c:	21 f4       	brne	.+8      	; 0x836 <__divsf3+0x16>
 82e:	5f 3f       	cpi	r21, 0xFF	; 255
 830:	19 f0       	breq	.+6      	; 0x838 <__divsf3+0x18>
 832:	eb c0       	rjmp	.+470    	; 0xa0a <__fp_inf>
 834:	51 11       	cpse	r21, r1
 836:	34 c1       	rjmp	.+616    	; 0xaa0 <__fp_szero>
 838:	ee c0       	rjmp	.+476    	; 0xa16 <__fp_nan>

0000083a <__divsf3x>:
 83a:	0f d1       	rcall	.+542    	; 0xa5a <__fp_split3>
 83c:	98 f3       	brcs	.-26     	; 0x824 <__divsf3+0x4>

0000083e <__divsf3_pse>:
 83e:	99 23       	and	r25, r25
 840:	c9 f3       	breq	.-14     	; 0x834 <__divsf3+0x14>
 842:	55 23       	and	r21, r21
 844:	b1 f3       	breq	.-20     	; 0x832 <__divsf3+0x12>
 846:	95 1b       	sub	r25, r21
 848:	55 0b       	sbc	r21, r21
 84a:	bb 27       	eor	r27, r27
 84c:	aa 27       	eor	r26, r26
 84e:	62 17       	cp	r22, r18
 850:	73 07       	cpc	r23, r19
 852:	84 07       	cpc	r24, r20
 854:	38 f0       	brcs	.+14     	; 0x864 <__divsf3_pse+0x26>
 856:	9f 5f       	subi	r25, 0xFF	; 255
 858:	5f 4f       	sbci	r21, 0xFF	; 255
 85a:	22 0f       	add	r18, r18
 85c:	33 1f       	adc	r19, r19
 85e:	44 1f       	adc	r20, r20
 860:	aa 1f       	adc	r26, r26
 862:	a9 f3       	breq	.-22     	; 0x84e <__divsf3_pse+0x10>
 864:	33 d0       	rcall	.+102    	; 0x8cc <__divsf3_pse+0x8e>
 866:	0e 2e       	mov	r0, r30
 868:	3a f0       	brmi	.+14     	; 0x878 <__divsf3_pse+0x3a>
 86a:	e0 e8       	ldi	r30, 0x80	; 128
 86c:	30 d0       	rcall	.+96     	; 0x8ce <__divsf3_pse+0x90>
 86e:	91 50       	subi	r25, 0x01	; 1
 870:	50 40       	sbci	r21, 0x00	; 0
 872:	e6 95       	lsr	r30
 874:	00 1c       	adc	r0, r0
 876:	ca f7       	brpl	.-14     	; 0x86a <__divsf3_pse+0x2c>
 878:	29 d0       	rcall	.+82     	; 0x8cc <__divsf3_pse+0x8e>
 87a:	fe 2f       	mov	r31, r30
 87c:	27 d0       	rcall	.+78     	; 0x8cc <__divsf3_pse+0x8e>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	bb 1f       	adc	r27, r27
 886:	26 17       	cp	r18, r22
 888:	37 07       	cpc	r19, r23
 88a:	48 07       	cpc	r20, r24
 88c:	ab 07       	cpc	r26, r27
 88e:	b0 e8       	ldi	r27, 0x80	; 128
 890:	09 f0       	breq	.+2      	; 0x894 <__divsf3_pse+0x56>
 892:	bb 0b       	sbc	r27, r27
 894:	80 2d       	mov	r24, r0
 896:	bf 01       	movw	r22, r30
 898:	ff 27       	eor	r31, r31
 89a:	93 58       	subi	r25, 0x83	; 131
 89c:	5f 4f       	sbci	r21, 0xFF	; 255
 89e:	2a f0       	brmi	.+10     	; 0x8aa <__divsf3_pse+0x6c>
 8a0:	9e 3f       	cpi	r25, 0xFE	; 254
 8a2:	51 05       	cpc	r21, r1
 8a4:	68 f0       	brcs	.+26     	; 0x8c0 <__divsf3_pse+0x82>
 8a6:	b1 c0       	rjmp	.+354    	; 0xa0a <__fp_inf>
 8a8:	fb c0       	rjmp	.+502    	; 0xaa0 <__fp_szero>
 8aa:	5f 3f       	cpi	r21, 0xFF	; 255
 8ac:	ec f3       	brlt	.-6      	; 0x8a8 <__divsf3_pse+0x6a>
 8ae:	98 3e       	cpi	r25, 0xE8	; 232
 8b0:	dc f3       	brlt	.-10     	; 0x8a8 <__divsf3_pse+0x6a>
 8b2:	86 95       	lsr	r24
 8b4:	77 95       	ror	r23
 8b6:	67 95       	ror	r22
 8b8:	b7 95       	ror	r27
 8ba:	f7 95       	ror	r31
 8bc:	9f 5f       	subi	r25, 0xFF	; 255
 8be:	c9 f7       	brne	.-14     	; 0x8b2 <__divsf3_pse+0x74>
 8c0:	88 0f       	add	r24, r24
 8c2:	91 1d       	adc	r25, r1
 8c4:	96 95       	lsr	r25
 8c6:	87 95       	ror	r24
 8c8:	97 f9       	bld	r25, 7
 8ca:	08 95       	ret
 8cc:	e1 e0       	ldi	r30, 0x01	; 1
 8ce:	66 0f       	add	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	bb 1f       	adc	r27, r27
 8d6:	62 17       	cp	r22, r18
 8d8:	73 07       	cpc	r23, r19
 8da:	84 07       	cpc	r24, r20
 8dc:	ba 07       	cpc	r27, r26
 8de:	20 f0       	brcs	.+8      	; 0x8e8 <__divsf3_pse+0xaa>
 8e0:	62 1b       	sub	r22, r18
 8e2:	73 0b       	sbc	r23, r19
 8e4:	84 0b       	sbc	r24, r20
 8e6:	ba 0b       	sbc	r27, r26
 8e8:	ee 1f       	adc	r30, r30
 8ea:	88 f7       	brcc	.-30     	; 0x8ce <__divsf3_pse+0x90>
 8ec:	e0 95       	com	r30
 8ee:	08 95       	ret

000008f0 <__fixunssfsi>:
 8f0:	bc d0       	rcall	.+376    	; 0xa6a <__fp_splitA>
 8f2:	88 f0       	brcs	.+34     	; 0x916 <__fixunssfsi+0x26>
 8f4:	9f 57       	subi	r25, 0x7F	; 127
 8f6:	90 f0       	brcs	.+36     	; 0x91c <__fixunssfsi+0x2c>
 8f8:	b9 2f       	mov	r27, r25
 8fa:	99 27       	eor	r25, r25
 8fc:	b7 51       	subi	r27, 0x17	; 23
 8fe:	a0 f0       	brcs	.+40     	; 0x928 <__fixunssfsi+0x38>
 900:	d1 f0       	breq	.+52     	; 0x936 <__fixunssfsi+0x46>
 902:	66 0f       	add	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	88 1f       	adc	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	1a f0       	brmi	.+6      	; 0x912 <__fixunssfsi+0x22>
 90c:	ba 95       	dec	r27
 90e:	c9 f7       	brne	.-14     	; 0x902 <__fixunssfsi+0x12>
 910:	12 c0       	rjmp	.+36     	; 0x936 <__fixunssfsi+0x46>
 912:	b1 30       	cpi	r27, 0x01	; 1
 914:	81 f0       	breq	.+32     	; 0x936 <__fixunssfsi+0x46>
 916:	c3 d0       	rcall	.+390    	; 0xa9e <__fp_zero>
 918:	b1 e0       	ldi	r27, 0x01	; 1
 91a:	08 95       	ret
 91c:	c0 c0       	rjmp	.+384    	; 0xa9e <__fp_zero>
 91e:	67 2f       	mov	r22, r23
 920:	78 2f       	mov	r23, r24
 922:	88 27       	eor	r24, r24
 924:	b8 5f       	subi	r27, 0xF8	; 248
 926:	39 f0       	breq	.+14     	; 0x936 <__fixunssfsi+0x46>
 928:	b9 3f       	cpi	r27, 0xF9	; 249
 92a:	cc f3       	brlt	.-14     	; 0x91e <__fixunssfsi+0x2e>
 92c:	86 95       	lsr	r24
 92e:	77 95       	ror	r23
 930:	67 95       	ror	r22
 932:	b3 95       	inc	r27
 934:	d9 f7       	brne	.-10     	; 0x92c <__fixunssfsi+0x3c>
 936:	3e f4       	brtc	.+14     	; 0x946 <__fixunssfsi+0x56>
 938:	90 95       	com	r25
 93a:	80 95       	com	r24
 93c:	70 95       	com	r23
 93e:	61 95       	neg	r22
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	08 95       	ret

00000948 <__floatunsisf>:
 948:	e8 94       	clt
 94a:	09 c0       	rjmp	.+18     	; 0x95e <__floatsisf+0x12>

0000094c <__floatsisf>:
 94c:	97 fb       	bst	r25, 7
 94e:	3e f4       	brtc	.+14     	; 0x95e <__floatsisf+0x12>
 950:	90 95       	com	r25
 952:	80 95       	com	r24
 954:	70 95       	com	r23
 956:	61 95       	neg	r22
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	99 23       	and	r25, r25
 960:	a9 f0       	breq	.+42     	; 0x98c <__floatsisf+0x40>
 962:	f9 2f       	mov	r31, r25
 964:	96 e9       	ldi	r25, 0x96	; 150
 966:	bb 27       	eor	r27, r27
 968:	93 95       	inc	r25
 96a:	f6 95       	lsr	r31
 96c:	87 95       	ror	r24
 96e:	77 95       	ror	r23
 970:	67 95       	ror	r22
 972:	b7 95       	ror	r27
 974:	f1 11       	cpse	r31, r1
 976:	f8 cf       	rjmp	.-16     	; 0x968 <__floatsisf+0x1c>
 978:	fa f4       	brpl	.+62     	; 0x9b8 <__floatsisf+0x6c>
 97a:	bb 0f       	add	r27, r27
 97c:	11 f4       	brne	.+4      	; 0x982 <__floatsisf+0x36>
 97e:	60 ff       	sbrs	r22, 0
 980:	1b c0       	rjmp	.+54     	; 0x9b8 <__floatsisf+0x6c>
 982:	6f 5f       	subi	r22, 0xFF	; 255
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	16 c0       	rjmp	.+44     	; 0x9b8 <__floatsisf+0x6c>
 98c:	88 23       	and	r24, r24
 98e:	11 f0       	breq	.+4      	; 0x994 <__floatsisf+0x48>
 990:	96 e9       	ldi	r25, 0x96	; 150
 992:	11 c0       	rjmp	.+34     	; 0x9b6 <__floatsisf+0x6a>
 994:	77 23       	and	r23, r23
 996:	21 f0       	breq	.+8      	; 0x9a0 <__floatsisf+0x54>
 998:	9e e8       	ldi	r25, 0x8E	; 142
 99a:	87 2f       	mov	r24, r23
 99c:	76 2f       	mov	r23, r22
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <__floatsisf+0x5e>
 9a0:	66 23       	and	r22, r22
 9a2:	71 f0       	breq	.+28     	; 0x9c0 <__floatsisf+0x74>
 9a4:	96 e8       	ldi	r25, 0x86	; 134
 9a6:	86 2f       	mov	r24, r22
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	60 e0       	ldi	r22, 0x00	; 0
 9ac:	2a f0       	brmi	.+10     	; 0x9b8 <__floatsisf+0x6c>
 9ae:	9a 95       	dec	r25
 9b0:	66 0f       	add	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	da f7       	brpl	.-10     	; 0x9ae <__floatsisf+0x62>
 9b8:	88 0f       	add	r24, r24
 9ba:	96 95       	lsr	r25
 9bc:	87 95       	ror	r24
 9be:	97 f9       	bld	r25, 7
 9c0:	08 95       	ret

000009c2 <__fp_cmp>:
 9c2:	99 0f       	add	r25, r25
 9c4:	00 08       	sbc	r0, r0
 9c6:	55 0f       	add	r21, r21
 9c8:	aa 0b       	sbc	r26, r26
 9ca:	e0 e8       	ldi	r30, 0x80	; 128
 9cc:	fe ef       	ldi	r31, 0xFE	; 254
 9ce:	16 16       	cp	r1, r22
 9d0:	17 06       	cpc	r1, r23
 9d2:	e8 07       	cpc	r30, r24
 9d4:	f9 07       	cpc	r31, r25
 9d6:	c0 f0       	brcs	.+48     	; 0xa08 <__fp_cmp+0x46>
 9d8:	12 16       	cp	r1, r18
 9da:	13 06       	cpc	r1, r19
 9dc:	e4 07       	cpc	r30, r20
 9de:	f5 07       	cpc	r31, r21
 9e0:	98 f0       	brcs	.+38     	; 0xa08 <__fp_cmp+0x46>
 9e2:	62 1b       	sub	r22, r18
 9e4:	73 0b       	sbc	r23, r19
 9e6:	84 0b       	sbc	r24, r20
 9e8:	95 0b       	sbc	r25, r21
 9ea:	39 f4       	brne	.+14     	; 0x9fa <__fp_cmp+0x38>
 9ec:	0a 26       	eor	r0, r26
 9ee:	61 f0       	breq	.+24     	; 0xa08 <__fp_cmp+0x46>
 9f0:	23 2b       	or	r18, r19
 9f2:	24 2b       	or	r18, r20
 9f4:	25 2b       	or	r18, r21
 9f6:	21 f4       	brne	.+8      	; 0xa00 <__fp_cmp+0x3e>
 9f8:	08 95       	ret
 9fa:	0a 26       	eor	r0, r26
 9fc:	09 f4       	brne	.+2      	; 0xa00 <__fp_cmp+0x3e>
 9fe:	a1 40       	sbci	r26, 0x01	; 1
 a00:	a6 95       	lsr	r26
 a02:	8f ef       	ldi	r24, 0xFF	; 255
 a04:	81 1d       	adc	r24, r1
 a06:	81 1d       	adc	r24, r1
 a08:	08 95       	ret

00000a0a <__fp_inf>:
 a0a:	97 f9       	bld	r25, 7
 a0c:	9f 67       	ori	r25, 0x7F	; 127
 a0e:	80 e8       	ldi	r24, 0x80	; 128
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	08 95       	ret

00000a16 <__fp_nan>:
 a16:	9f ef       	ldi	r25, 0xFF	; 255
 a18:	80 ec       	ldi	r24, 0xC0	; 192
 a1a:	08 95       	ret

00000a1c <__fp_pscA>:
 a1c:	00 24       	eor	r0, r0
 a1e:	0a 94       	dec	r0
 a20:	16 16       	cp	r1, r22
 a22:	17 06       	cpc	r1, r23
 a24:	18 06       	cpc	r1, r24
 a26:	09 06       	cpc	r0, r25
 a28:	08 95       	ret

00000a2a <__fp_pscB>:
 a2a:	00 24       	eor	r0, r0
 a2c:	0a 94       	dec	r0
 a2e:	12 16       	cp	r1, r18
 a30:	13 06       	cpc	r1, r19
 a32:	14 06       	cpc	r1, r20
 a34:	05 06       	cpc	r0, r21
 a36:	08 95       	ret

00000a38 <__fp_round>:
 a38:	09 2e       	mov	r0, r25
 a3a:	03 94       	inc	r0
 a3c:	00 0c       	add	r0, r0
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0xc>
 a40:	88 23       	and	r24, r24
 a42:	52 f0       	brmi	.+20     	; 0xa58 <__fp_round+0x20>
 a44:	bb 0f       	add	r27, r27
 a46:	40 f4       	brcc	.+16     	; 0xa58 <__fp_round+0x20>
 a48:	bf 2b       	or	r27, r31
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__fp_round+0x18>
 a4c:	60 ff       	sbrs	r22, 0
 a4e:	04 c0       	rjmp	.+8      	; 0xa58 <__fp_round+0x20>
 a50:	6f 5f       	subi	r22, 0xFF	; 255
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	08 95       	ret

00000a5a <__fp_split3>:
 a5a:	57 fd       	sbrc	r21, 7
 a5c:	90 58       	subi	r25, 0x80	; 128
 a5e:	44 0f       	add	r20, r20
 a60:	55 1f       	adc	r21, r21
 a62:	59 f0       	breq	.+22     	; 0xa7a <__fp_splitA+0x10>
 a64:	5f 3f       	cpi	r21, 0xFF	; 255
 a66:	71 f0       	breq	.+28     	; 0xa84 <__fp_splitA+0x1a>
 a68:	47 95       	ror	r20

00000a6a <__fp_splitA>:
 a6a:	88 0f       	add	r24, r24
 a6c:	97 fb       	bst	r25, 7
 a6e:	99 1f       	adc	r25, r25
 a70:	61 f0       	breq	.+24     	; 0xa8a <__fp_splitA+0x20>
 a72:	9f 3f       	cpi	r25, 0xFF	; 255
 a74:	79 f0       	breq	.+30     	; 0xa94 <__fp_splitA+0x2a>
 a76:	87 95       	ror	r24
 a78:	08 95       	ret
 a7a:	12 16       	cp	r1, r18
 a7c:	13 06       	cpc	r1, r19
 a7e:	14 06       	cpc	r1, r20
 a80:	55 1f       	adc	r21, r21
 a82:	f2 cf       	rjmp	.-28     	; 0xa68 <__fp_split3+0xe>
 a84:	46 95       	lsr	r20
 a86:	f1 df       	rcall	.-30     	; 0xa6a <__fp_splitA>
 a88:	08 c0       	rjmp	.+16     	; 0xa9a <__fp_splitA+0x30>
 a8a:	16 16       	cp	r1, r22
 a8c:	17 06       	cpc	r1, r23
 a8e:	18 06       	cpc	r1, r24
 a90:	99 1f       	adc	r25, r25
 a92:	f1 cf       	rjmp	.-30     	; 0xa76 <__fp_splitA+0xc>
 a94:	86 95       	lsr	r24
 a96:	71 05       	cpc	r23, r1
 a98:	61 05       	cpc	r22, r1
 a9a:	08 94       	sec
 a9c:	08 95       	ret

00000a9e <__fp_zero>:
 a9e:	e8 94       	clt

00000aa0 <__fp_szero>:
 aa0:	bb 27       	eor	r27, r27
 aa2:	66 27       	eor	r22, r22
 aa4:	77 27       	eor	r23, r23
 aa6:	cb 01       	movw	r24, r22
 aa8:	97 f9       	bld	r25, 7
 aaa:	08 95       	ret

00000aac <__gesf2>:
 aac:	8a df       	rcall	.-236    	; 0x9c2 <__fp_cmp>
 aae:	08 f4       	brcc	.+2      	; 0xab2 <__gesf2+0x6>
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	08 95       	ret

00000ab4 <__mulsf3>:
 ab4:	0b d0       	rcall	.+22     	; 0xacc <__mulsf3x>
 ab6:	c0 cf       	rjmp	.-128    	; 0xa38 <__fp_round>
 ab8:	b1 df       	rcall	.-158    	; 0xa1c <__fp_pscA>
 aba:	28 f0       	brcs	.+10     	; 0xac6 <__mulsf3+0x12>
 abc:	b6 df       	rcall	.-148    	; 0xa2a <__fp_pscB>
 abe:	18 f0       	brcs	.+6      	; 0xac6 <__mulsf3+0x12>
 ac0:	95 23       	and	r25, r21
 ac2:	09 f0       	breq	.+2      	; 0xac6 <__mulsf3+0x12>
 ac4:	a2 cf       	rjmp	.-188    	; 0xa0a <__fp_inf>
 ac6:	a7 cf       	rjmp	.-178    	; 0xa16 <__fp_nan>
 ac8:	11 24       	eor	r1, r1
 aca:	ea cf       	rjmp	.-44     	; 0xaa0 <__fp_szero>

00000acc <__mulsf3x>:
 acc:	c6 df       	rcall	.-116    	; 0xa5a <__fp_split3>
 ace:	a0 f3       	brcs	.-24     	; 0xab8 <__mulsf3+0x4>

00000ad0 <__mulsf3_pse>:
 ad0:	95 9f       	mul	r25, r21
 ad2:	d1 f3       	breq	.-12     	; 0xac8 <__mulsf3+0x14>
 ad4:	95 0f       	add	r25, r21
 ad6:	50 e0       	ldi	r21, 0x00	; 0
 ad8:	55 1f       	adc	r21, r21
 ada:	62 9f       	mul	r22, r18
 adc:	f0 01       	movw	r30, r0
 ade:	72 9f       	mul	r23, r18
 ae0:	bb 27       	eor	r27, r27
 ae2:	f0 0d       	add	r31, r0
 ae4:	b1 1d       	adc	r27, r1
 ae6:	63 9f       	mul	r22, r19
 ae8:	aa 27       	eor	r26, r26
 aea:	f0 0d       	add	r31, r0
 aec:	b1 1d       	adc	r27, r1
 aee:	aa 1f       	adc	r26, r26
 af0:	64 9f       	mul	r22, r20
 af2:	66 27       	eor	r22, r22
 af4:	b0 0d       	add	r27, r0
 af6:	a1 1d       	adc	r26, r1
 af8:	66 1f       	adc	r22, r22
 afa:	82 9f       	mul	r24, r18
 afc:	22 27       	eor	r18, r18
 afe:	b0 0d       	add	r27, r0
 b00:	a1 1d       	adc	r26, r1
 b02:	62 1f       	adc	r22, r18
 b04:	73 9f       	mul	r23, r19
 b06:	b0 0d       	add	r27, r0
 b08:	a1 1d       	adc	r26, r1
 b0a:	62 1f       	adc	r22, r18
 b0c:	83 9f       	mul	r24, r19
 b0e:	a0 0d       	add	r26, r0
 b10:	61 1d       	adc	r22, r1
 b12:	22 1f       	adc	r18, r18
 b14:	74 9f       	mul	r23, r20
 b16:	33 27       	eor	r19, r19
 b18:	a0 0d       	add	r26, r0
 b1a:	61 1d       	adc	r22, r1
 b1c:	23 1f       	adc	r18, r19
 b1e:	84 9f       	mul	r24, r20
 b20:	60 0d       	add	r22, r0
 b22:	21 1d       	adc	r18, r1
 b24:	82 2f       	mov	r24, r18
 b26:	76 2f       	mov	r23, r22
 b28:	6a 2f       	mov	r22, r26
 b2a:	11 24       	eor	r1, r1
 b2c:	9f 57       	subi	r25, 0x7F	; 127
 b2e:	50 40       	sbci	r21, 0x00	; 0
 b30:	8a f0       	brmi	.+34     	; 0xb54 <__mulsf3_pse+0x84>
 b32:	e1 f0       	breq	.+56     	; 0xb6c <__mulsf3_pse+0x9c>
 b34:	88 23       	and	r24, r24
 b36:	4a f0       	brmi	.+18     	; 0xb4a <__mulsf3_pse+0x7a>
 b38:	ee 0f       	add	r30, r30
 b3a:	ff 1f       	adc	r31, r31
 b3c:	bb 1f       	adc	r27, r27
 b3e:	66 1f       	adc	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	91 50       	subi	r25, 0x01	; 1
 b46:	50 40       	sbci	r21, 0x00	; 0
 b48:	a9 f7       	brne	.-22     	; 0xb34 <__mulsf3_pse+0x64>
 b4a:	9e 3f       	cpi	r25, 0xFE	; 254
 b4c:	51 05       	cpc	r21, r1
 b4e:	70 f0       	brcs	.+28     	; 0xb6c <__mulsf3_pse+0x9c>
 b50:	5c cf       	rjmp	.-328    	; 0xa0a <__fp_inf>
 b52:	a6 cf       	rjmp	.-180    	; 0xaa0 <__fp_szero>
 b54:	5f 3f       	cpi	r21, 0xFF	; 255
 b56:	ec f3       	brlt	.-6      	; 0xb52 <__mulsf3_pse+0x82>
 b58:	98 3e       	cpi	r25, 0xE8	; 232
 b5a:	dc f3       	brlt	.-10     	; 0xb52 <__mulsf3_pse+0x82>
 b5c:	86 95       	lsr	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	b7 95       	ror	r27
 b64:	f7 95       	ror	r31
 b66:	e7 95       	ror	r30
 b68:	9f 5f       	subi	r25, 0xFF	; 255
 b6a:	c1 f7       	brne	.-16     	; 0xb5c <__mulsf3_pse+0x8c>
 b6c:	fe 2b       	or	r31, r30
 b6e:	88 0f       	add	r24, r24
 b70:	91 1d       	adc	r25, r1
 b72:	96 95       	lsr	r25
 b74:	87 95       	ror	r24
 b76:	97 f9       	bld	r25, 7
 b78:	08 95       	ret

00000b7a <__divmodhi4>:
 b7a:	97 fb       	bst	r25, 7
 b7c:	09 2e       	mov	r0, r25
 b7e:	07 26       	eor	r0, r23
 b80:	0a d0       	rcall	.+20     	; 0xb96 <__divmodhi4_neg1>
 b82:	77 fd       	sbrc	r23, 7
 b84:	04 d0       	rcall	.+8      	; 0xb8e <__divmodhi4_neg2>
 b86:	0c d0       	rcall	.+24     	; 0xba0 <__udivmodhi4>
 b88:	06 d0       	rcall	.+12     	; 0xb96 <__divmodhi4_neg1>
 b8a:	00 20       	and	r0, r0
 b8c:	1a f4       	brpl	.+6      	; 0xb94 <__divmodhi4_exit>

00000b8e <__divmodhi4_neg2>:
 b8e:	70 95       	com	r23
 b90:	61 95       	neg	r22
 b92:	7f 4f       	sbci	r23, 0xFF	; 255

00000b94 <__divmodhi4_exit>:
 b94:	08 95       	ret

00000b96 <__divmodhi4_neg1>:
 b96:	f6 f7       	brtc	.-4      	; 0xb94 <__divmodhi4_exit>
 b98:	90 95       	com	r25
 b9a:	81 95       	neg	r24
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	08 95       	ret

00000ba0 <__udivmodhi4>:
 ba0:	aa 1b       	sub	r26, r26
 ba2:	bb 1b       	sub	r27, r27
 ba4:	51 e1       	ldi	r21, 0x11	; 17
 ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <__udivmodhi4_ep>

00000ba8 <__udivmodhi4_loop>:
 ba8:	aa 1f       	adc	r26, r26
 baa:	bb 1f       	adc	r27, r27
 bac:	a6 17       	cp	r26, r22
 bae:	b7 07       	cpc	r27, r23
 bb0:	10 f0       	brcs	.+4      	; 0xbb6 <__udivmodhi4_ep>
 bb2:	a6 1b       	sub	r26, r22
 bb4:	b7 0b       	sbc	r27, r23

00000bb6 <__udivmodhi4_ep>:
 bb6:	88 1f       	adc	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	5a 95       	dec	r21
 bbc:	a9 f7       	brne	.-22     	; 0xba8 <__udivmodhi4_loop>
 bbe:	80 95       	com	r24
 bc0:	90 95       	com	r25
 bc2:	bc 01       	movw	r22, r24
 bc4:	cd 01       	movw	r24, r26
 bc6:	08 95       	ret

00000bc8 <__eerd_byte_m16>:
 bc8:	e1 99       	sbic	0x1c, 1	; 28
 bca:	fe cf       	rjmp	.-4      	; 0xbc8 <__eerd_byte_m16>
 bcc:	9f bb       	out	0x1f, r25	; 31
 bce:	8e bb       	out	0x1e, r24	; 30
 bd0:	e0 9a       	sbi	0x1c, 0	; 28
 bd2:	99 27       	eor	r25, r25
 bd4:	8d b3       	in	r24, 0x1d	; 29
 bd6:	08 95       	ret

00000bd8 <__eewr_byte_m16>:
 bd8:	26 2f       	mov	r18, r22

00000bda <__eewr_r18_m16>:
 bda:	e1 99       	sbic	0x1c, 1	; 28
 bdc:	fe cf       	rjmp	.-4      	; 0xbda <__eewr_r18_m16>
 bde:	9f bb       	out	0x1f, r25	; 31
 be0:	8e bb       	out	0x1e, r24	; 30
 be2:	2d bb       	out	0x1d, r18	; 29
 be4:	0f b6       	in	r0, 0x3f	; 63
 be6:	f8 94       	cli
 be8:	e2 9a       	sbi	0x1c, 2	; 28
 bea:	e1 9a       	sbi	0x1c, 1	; 28
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	01 96       	adiw	r24, 0x01	; 1
 bf0:	08 95       	ret

00000bf2 <_exit>:
 bf2:	f8 94       	cli

00000bf4 <__stop_program>:
 bf4:	ff cf       	rjmp	.-2      	; 0xbf4 <__stop_program>
