
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c5e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800062  00800062  00000cf4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d4  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fad  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034f  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d63  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00003148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000069e  00000000  00000000  00003851  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003eef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 03 	call	0x79a	; 0x79a <main>
  8a:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
unsigned char sensorbyte=0;

//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
  96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
  98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
  9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
  9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
  9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
  a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
  a2:	11 ba       	out	0x11, r1	; 17
}
  a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
  a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
  a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
  aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
  ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
  ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
  b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
  b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
  b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
  b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;
  bc:	8f e8       	ldi	r24, 0x8F	; 143
  be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
  c0:	82 ea       	ldi	r24, 0xA2	; 162
  c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
  c4:	89 e1       	ldi	r24, 0x19	; 25
  c6:	8e bd       	out	0x2e, r24	; 46
}
  c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
  ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
  cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	88 b9       	out	0x08, r24	; 8
}
  da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
  dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
  de:	87 70       	andi	r24, 0x07	; 7
  e0:	80 66       	ori	r24, 0x60	; 96
  e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
  e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
  e6:	36 99       	sbic	0x06, 6	; 6
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
  ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
  ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
  ee:	ac 01       	movw	r20, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	60 e9       	ldi	r22, 0x90	; 144
  f4:	71 e0       	ldi	r23, 0x01	; 1
  f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
  f8:	fb 01       	movw	r30, r22
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	24 30       	cpi	r18, 0x04	; 4
 106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
 108:	84 ec       	ldi	r24, 0xC4	; 196
 10a:	99 e0       	ldi	r25, 0x09	; 9
 10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
 10e:	3f 5f       	subi	r19, 0xFF	; 255
 110:	83 2f       	mov	r24, r19
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	84 17       	cp	r24, r20
 116:	95 07       	cpc	r25, r21
 118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
 11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
 120:	af 92       	push	r10
 122:	bf 92       	push	r11
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
	_delay_ms(n);
 130:	aa 27       	eor	r26, r26
 132:	97 fd       	sbrc	r25, 7
 134:	a0 95       	com	r26
 136:	ba 2f       	mov	r27, r26
 138:	bc 01       	movw	r22, r24
 13a:	cd 01       	movw	r24, r26
 13c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatsisf>
 140:	5b 01       	movw	r10, r22
 142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	4a e7       	ldi	r20, 0x7A	; 122
 14a:	55 e4       	ldi	r21, 0x45	; 69
 14c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 150:	7b 01       	movw	r14, r22
 152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	40 e8       	ldi	r20, 0x80	; 128
 15a:	5f e3       	ldi	r21, 0x3F	; 63
 15c:	0e 94 40 04 	call	0x880	; 0x880 <__cmpsf2>
 160:	88 23       	and	r24, r24
 162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
 16a:	c8 01       	movw	r24, r16
 16c:	b7 01       	movw	r22, r14
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	3f ef       	ldi	r19, 0xFF	; 255
 172:	4f e7       	ldi	r20, 0x7F	; 127
 174:	57 e4       	ldi	r21, 0x47	; 71
 176:	0e 94 8a 05 	call	0xb14	; 0xb14 <__gesf2>
 17a:	18 16       	cp	r1, r24
 17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 17e:	c6 01       	movw	r24, r12
 180:	b5 01       	movw	r22, r10
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e2       	ldi	r20, 0x20	; 32
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 18e:	0e 94 ac 04 	call	0x958	; 0x958 <__fixunssfsi>
 192:	80 e9       	ldi	r24, 0x90	; 144
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
 198:	fc 01       	movw	r30, r24
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19e:	61 50       	subi	r22, 0x01	; 1
 1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a2:	61 15       	cp	r22, r1
 1a4:	71 05       	cpc	r23, r1
 1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1aa:	c8 01       	movw	r24, r16
 1ac:	b7 01       	movw	r22, r14
 1ae:	0e 94 ac 04 	call	0x958	; 0x958 <__fixunssfsi>
 1b2:	cb 01       	movw	r24, r22
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	df 90       	pop	r13
 1c2:	cf 90       	pop	r12
 1c4:	bf 90       	pop	r11
 1c6:	af 90       	pop	r10
 1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
 1ca:	af 92       	push	r10
 1cc:	bf 92       	push	r11
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
	_delay_us(n);
 1da:	aa 27       	eor	r26, r26
 1dc:	97 fd       	sbrc	r25, 7
 1de:	a0 95       	com	r26
 1e0:	ba 2f       	mov	r27, r26
 1e2:	bc 01       	movw	r22, r24
 1e4:	cd 01       	movw	r24, r26
 1e6:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatsisf>
 1ea:	5b 01       	movw	r10, r22
 1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 1ee:	2b ea       	ldi	r18, 0xAB	; 171
 1f0:	3a ea       	ldi	r19, 0xAA	; 170
 1f2:	4a ea       	ldi	r20, 0xAA	; 170
 1f4:	50 e4       	ldi	r21, 0x40	; 64
 1f6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 1fa:	7b 01       	movw	r14, r22
 1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	40 e8       	ldi	r20, 0x80	; 128
 204:	5f e3       	ldi	r21, 0x3F	; 63
 206:	0e 94 40 04 	call	0x880	; 0x880 <__cmpsf2>
 20a:	88 23       	and	r24, r24
 20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
 212:	c8 01       	movw	r24, r16
 214:	b7 01       	movw	r22, r14
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	4f e7       	ldi	r20, 0x7F	; 127
 21c:	53 e4       	ldi	r21, 0x43	; 67
 21e:	0e 94 8a 05 	call	0xb14	; 0xb14 <__gesf2>
 222:	18 16       	cp	r1, r24
 224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
 226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
 228:	c6 01       	movw	r24, r12
 22a:	b5 01       	movw	r22, r10
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	4a e7       	ldi	r20, 0x7A	; 122
 232:	54 e4       	ldi	r21, 0x44	; 68
 234:	0e 94 44 04 	call	0x888	; 0x888 <__divsf3>
 238:	5b 01       	movw	r10, r22
 23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	4a e7       	ldi	r20, 0x7A	; 122
 242:	55 e4       	ldi	r21, 0x45	; 69
 244:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 248:	7b 01       	movw	r14, r22
 24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e8       	ldi	r20, 0x80	; 128
 252:	5f e3       	ldi	r21, 0x3F	; 63
 254:	0e 94 40 04 	call	0x880	; 0x880 <__cmpsf2>
 258:	88 23       	and	r24, r24
 25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
 262:	c8 01       	movw	r24, r16
 264:	b7 01       	movw	r22, r14
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	3f ef       	ldi	r19, 0xFF	; 255
 26a:	4f e7       	ldi	r20, 0x7F	; 127
 26c:	57 e4       	ldi	r21, 0x47	; 71
 26e:	0e 94 8a 05 	call	0xb14	; 0xb14 <__gesf2>
 272:	18 16       	cp	r1, r24
 274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 276:	c6 01       	movw	r24, r12
 278:	b5 01       	movw	r22, r10
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e2       	ldi	r20, 0x20	; 32
 280:	51 e4       	ldi	r21, 0x41	; 65
 282:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 286:	0e 94 ac 04 	call	0x958	; 0x958 <__fixunssfsi>
 28a:	80 e9       	ldi	r24, 0x90	; 144
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
 290:	fc 01       	movw	r30, r24
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 296:	61 50       	subi	r22, 0x01	; 1
 298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29a:	61 15       	cp	r22, r1
 29c:	71 05       	cpc	r23, r1
 29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
 2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a2:	c8 01       	movw	r24, r16
 2a4:	b7 01       	movw	r22, r14
 2a6:	0e 94 ac 04 	call	0x958	; 0x958 <__fixunssfsi>
 2aa:	cb 01       	movw	r24, r22
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 2b2:	c8 01       	movw	r24, r16
 2b4:	b7 01       	movw	r22, r14
 2b6:	0e 94 ac 04 	call	0x958	; 0x958 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2ba:	6a 95       	dec	r22
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	bf 90       	pop	r11
 2cc:	af 90       	pop	r10
 2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
 2d0:	ef 92       	push	r14
 2d2:	ff 92       	push	r15
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
sensorbyte=0;
 2da:	10 92 62 00 	sts	0x0062, r1
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]>threshold[i])
	  sensorbyte|=(1<<i);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	e8 2e       	mov	r14, r24
 2e6:	f1 2c       	mov	r15, r1
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
 2e8:	8c 2f       	mov	r24, r28
 2ea:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]>threshold[i])
 2ee:	fe 01       	movw	r30, r28
 2f0:	ec 59       	subi	r30, 0x9C	; 156
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	90 81       	ld	r25, Z
 2f6:	98 17       	cp	r25, r24
 2f8:	60 f4       	brcc	.+24     	; 0x312 <check_sensors+0x42>
	  sensorbyte|=(1<<i);
 2fa:	97 01       	movw	r18, r14
 2fc:	0c 2e       	mov	r0, r28
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <check_sensors+0x34>
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <check_sensors+0x30>
 308:	80 91 62 00 	lds	r24, 0x0062
 30c:	82 2b       	or	r24, r18
 30e:	80 93 62 00 	sts	0x0062, r24
 312:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
 314:	c4 30       	cpi	r28, 0x04	; 4
 316:	d1 05       	cpc	r29, r1
 318:	39 f7       	brne	.-50     	; 0x2e8 <check_sensors+0x18>
	  temp[i]=adc_start(i);
	  if(temp[i]>threshold[i])
	  sensorbyte|=(1<<i);
	 
	 } 
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	08 95       	ret

00000326 <calibrate_black>:
 
 //CALIBRATE FOR BLACK SURFACE
 void calibrate_black(void)
{
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	ca e6       	ldi	r28, 0x6A	; 106
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	00 e0       	ldi	r16, 0x00	; 0
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
 334:	80 2f       	mov	r24, r16
 336:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
 33a:	88 83       	st	Y, r24
 33c:	10 e0       	ldi	r17, 0x00	; 0
		  
		  for(i=0;i<10;i++)
		 {
			  temp[i]=adc_start(j);
 33e:	80 2f       	mov	r24, r16
 340:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
 344:	98 2f       	mov	r25, r24
			  
			  if(temp[i]>max[j])
 346:	88 81       	ld	r24, Y
 348:	89 17       	cp	r24, r25
 34a:	08 f4       	brcc	.+2      	; 0x34e <calibrate_black+0x28>
			  {
			  max[j]=temp[i];
 34c:	98 83       	st	Y, r25

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
		  
		  for(i=0;i<10;i++)
 34e:	1f 5f       	subi	r17, 0xFF	; 255
 350:	1a 30       	cpi	r17, 0x0A	; 10
 352:	a9 f7       	brne	.-22     	; 0x33e <calibrate_black+0x18>
 //CALIBRATE FOR BLACK SURFACE
 void calibrate_black(void)
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
 354:	0f 5f       	subi	r16, 0xFF	; 255
 356:	21 96       	adiw	r28, 0x01	; 1
 358:	04 30       	cpi	r16, 0x04	; 4
 35a:	61 f7       	brne	.-40     	; 0x334 <calibrate_black+0xe>
		 }
	 
	}

		
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <calibrate_white>:

//CALIBRATE FOR WHITE SURFACE
void calibrate_white(void)
{
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	c8 e7       	ldi	r28, 0x78	; 120
 370:	d0 e0       	ldi	r29, 0x00	; 0
 372:	00 e0       	ldi	r16, 0x00	; 0

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
 374:	80 2f       	mov	r24, r16
 376:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
 37a:	88 83       	st	Y, r24
 37c:	10 e0       	ldi	r17, 0x00	; 0
		  
		  for(i=0;i<10;i++)
		 {
			  temp[i]=adc_start(j);
 37e:	80 2f       	mov	r24, r16
 380:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
 384:	98 2f       	mov	r25, r24
			  
			 if(temp[i]<min[j])
 386:	88 81       	ld	r24, Y
 388:	98 17       	cp	r25, r24
 38a:	08 f4       	brcc	.+2      	; 0x38e <calibrate_white+0x28>
			  {
			  min[j]=temp[i];
 38c:	98 83       	st	Y, r25
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
		  
		  for(i=0;i<10;i++)
 38e:	1f 5f       	subi	r17, 0xFF	; 255
 390:	1a 30       	cpi	r17, 0x0A	; 10
 392:	a9 f7       	brne	.-22     	; 0x37e <calibrate_white+0x18>
void calibrate_white(void)
{

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
 394:	0f 5f       	subi	r16, 0xFF	; 255
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	04 30       	cpi	r16, 0x04	; 4
 39a:	61 f7       	brne	.-40     	; 0x374 <calibrate_white+0xe>
		 }
	 
	}

		
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	c0 e0       	ldi	r28, 0x00	; 0
 3ae:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
 3b0:	1f ef       	ldi	r17, 0xFF	; 255
 3b2:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
 3b4:	84 e6       	ldi	r24, 0x64	; 100
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
 3bc:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
 3be:	84 e6       	ldi	r24, 0x64	; 100
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
 3c6:	21 96       	adiw	r28, 0x01	; 1
 3c8:	c5 30       	cpi	r28, 0x05	; 5
 3ca:	d1 05       	cpc	r29, r1
 3cc:	91 f7       	brne	.-28     	; 0x3b2 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	08 95       	ret

000003d6 <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
 3d6:	9b bd       	out	0x2b, r25	; 43
 3d8:	8a bd       	out	0x2a, r24	; 42
}
 3da:	08 95       	ret

000003dc <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
 3dc:	99 bd       	out	0x29, r25	; 41
 3de:	88 bd       	out	0x28, r24	; 40
}
 3e0:	08 95       	ret

000003e2 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
 3e2:	87 b3       	in	r24, 0x17	; 23
 3e4:	80 7f       	andi	r24, 0xF0	; 240
 3e6:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
 3e8:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
 3ea:	c5 98       	cbi	0x18, 5	; 24
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	8a 95       	dec	r24
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
 3f2:	22 e0       	ldi	r18, 0x02	; 2
 3f4:	35 e0       	ldi	r19, 0x05	; 5
 3f6:	c7 9a       	sbi	0x18, 7	; 24
 3f8:	82 2f       	mov	r24, r18
 3fa:	8a 95       	dec	r24
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
 3fe:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 400:	82 95       	swap	r24
 402:	80 7f       	andi	r24, 0xF0	; 240
 404:	92 2f       	mov	r25, r18
 406:	9a 95       	dec	r25
 408:	f1 f7       	brne	.-4      	; 0x406 <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
 40a:	c7 98       	cbi	0x18, 7	; 24
 40c:	93 2f       	mov	r25, r19
 40e:	9a 95       	dec	r25
 410:	f1 f7       	brne	.-4      	; 0x40e <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
 412:	c7 9a       	sbi	0x18, 7	; 24
 414:	92 2f       	mov	r25, r18
 416:	9a 95       	dec	r25
 418:	f1 f7       	brne	.-4      	; 0x416 <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
 41a:	96 b3       	in	r25, 0x16	; 22
 41c:	92 2f       	mov	r25, r18
 41e:	9a 95       	dec	r25
 420:	f1 f7       	brne	.-4      	; 0x41e <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
 422:	c7 98       	cbi	0x18, 7	; 24
 424:	93 2f       	mov	r25, r19
 426:	9a 95       	dec	r25
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 42a:	87 fd       	sbrc	r24, 7
 42c:	e4 cf       	rjmp	.-56     	; 0x3f6 <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
 42e:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 430:	87 b3       	in	r24, 0x17	; 23
 432:	8f 60       	ori	r24, 0x0F	; 15
 434:	87 bb       	out	0x17, r24	; 23

}
 436:	08 95       	ret

00000438 <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
 438:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
 43a:	66 23       	and	r22, r22
 43c:	11 f4       	brne	.+4      	; 0x442 <lcd_byte+0xa>
	CLEAR_RS();
 43e:	c5 98       	cbi	0x18, 5	; 24
 440:	01 c0       	rjmp	.+2      	; 0x444 <lcd_byte+0xc>
else
	SET_RS();
 442:	c5 9a       	sbi	0x18, 5	; 24
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	8a 95       	dec	r24
 448:	f1 f7       	brne	.-4      	; 0x446 <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
 44a:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
 44c:	88 b3       	in	r24, 0x18	; 24
 44e:	92 2f       	mov	r25, r18
 450:	92 95       	swap	r25
 452:	9f 70       	andi	r25, 0x0F	; 15
 454:	80 7f       	andi	r24, 0xF0	; 240
 456:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 458:	98 bb       	out	0x18, r25	; 24
 45a:	95 e0       	ldi	r25, 0x05	; 5
 45c:	89 2f       	mov	r24, r25
 45e:	8a 95       	dec	r24
 460:	f1 f7       	brne	.-4      	; 0x45e <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
 462:	c7 98       	cbi	0x18, 7	; 24
 464:	89 2f       	mov	r24, r25
 466:	8a 95       	dec	r24
 468:	f1 f7       	brne	.-4      	; 0x466 <__stack+0x7>
_delay_us(1);
SET_E();
 46a:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
 46c:	88 b3       	in	r24, 0x18	; 24
 46e:	2f 70       	andi	r18, 0x0F	; 15
 470:	80 7f       	andi	r24, 0xF0	; 240
 472:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
 474:	88 bb       	out	0x18, r24	; 24
 476:	89 2f       	mov	r24, r25
 478:	8a 95       	dec	r24
 47a:	f1 f7       	brne	.-4      	; 0x478 <__stack+0x19>
_delay_us(1);			//tEH
CLEAR_E();
 47c:	c7 98       	cbi	0x18, 7	; 24
 47e:	9a 95       	dec	r25
 480:	f1 f7       	brne	.-4      	; 0x47e <__stack+0x1f>
_delay_us(1);			//tEL
lcd_busy_loop();
 482:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lcd_busy_loop>
}
 486:	08 95       	ret

00000488 <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
 488:	1f 93       	push	r17
 48a:	18 2f       	mov	r17, r24
 48c:	8c e2       	ldi	r24, 0x2C	; 44
 48e:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 490:	20 e9       	ldi	r18, 0x90	; 144
 492:	31 e0       	ldi	r19, 0x01	; 1
 494:	f9 01       	movw	r30, r18
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 49a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 49c:	d9 f7       	brne	.-10     	; 0x494 <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 49e:	87 b3       	in	r24, 0x17	; 23
 4a0:	8f 60       	ori	r24, 0x0F	; 15
 4a2:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 4a4:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 4a6:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 4a8:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
 4aa:	88 b3       	in	r24, 0x18	; 24
 4ac:	80 7f       	andi	r24, 0xF0	; 240
 4ae:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 4b0:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
 4b2:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
 4b4:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	8a 95       	dec	r24
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
 4bc:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
 4be:	c1 9a       	sbi	0x18, 1	; 24
 4c0:	85 e0       	ldi	r24, 0x05	; 5
 4c2:	98 2f       	mov	r25, r24
 4c4:	9a 95       	dec	r25
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
 4c8:	c7 98       	cbi	0x18, 7	; 24
 4ca:	8a 95       	dec	r24
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
 4ce:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
 4d2:	81 2f       	mov	r24, r17
 4d4:	8c 60       	ori	r24, 0x0C	; 12
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
 4dc:	88 e2       	ldi	r24, 0x28	; 40
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_byte>
}
 4e4:	1f 91       	pop	r17
 4e6:	08 95       	ret

000004e8 <lcd_write_string>:
void lcd_write_string(const char *msg)
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	ec 01       	movw	r28, r24
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_byte>
	msg++;
 4f6:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
 4f8:	88 81       	ld	r24, Y
 4fa:	88 23       	and	r24, r24
 4fc:	c9 f7       	brne	.-14     	; 0x4f0 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
 504:	ef 92       	push	r14
 506:	ff 92       	push	r15
 508:	0f 93       	push	r16
 50a:	1f 93       	push	r17
 50c:	df 93       	push	r29
 50e:	cf 93       	push	r28
 510:	00 d0       	rcall	.+0      	; 0x512 <lcd_write_int+0xe>
 512:	00 d0       	rcall	.+0      	; 0x514 <lcd_write_int+0x10>
 514:	0f 92       	push	r0
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	9c 01       	movw	r18, r24
 51c:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
 51e:	fe 01       	movw	r30, r28
 520:	31 96       	adiw	r30, 0x01	; 1
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	df 01       	movw	r26, r30
 526:	1d 92       	st	X+, r1
 528:	8a 95       	dec	r24
 52a:	e9 f7       	brne	.-6      	; 0x526 <lcd_write_int+0x22>
 52c:	fe 01       	movw	r30, r28
 52e:	35 96       	adiw	r30, 0x05	; 5
 530:	0d c0       	rjmp	.+26     	; 0x54c <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 532:	c9 01       	movw	r24, r18
 534:	6a e0       	ldi	r22, 0x0A	; 10
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__divmodhi4>
 53c:	80 83       	st	Z, r24
	val=val/10;
 53e:	c9 01       	movw	r24, r18
 540:	6a e0       	ldi	r22, 0x0A	; 10
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__divmodhi4>
 548:	9b 01       	movw	r18, r22
 54a:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 54c:	21 15       	cp	r18, r1
 54e:	31 05       	cpc	r19, r1
 550:	81 f7       	brne	.-32     	; 0x532 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 552:	bf ef       	ldi	r27, 0xFF	; 255
 554:	0f 3f       	cpi	r16, 0xFF	; 255
 556:	1b 07       	cpc	r17, r27
 558:	79 f4       	brne	.+30     	; 0x578 <lcd_write_int+0x74>
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 55e:	ae 01       	movw	r20, r28
 560:	4f 5f       	subi	r20, 0xFF	; 255
 562:	5f 4f       	sbci	r21, 0xFF	; 255
 564:	02 c0       	rjmp	.+4      	; 0x56a <lcd_write_int+0x66>
 566:	2f 5f       	subi	r18, 0xFF	; 255
 568:	3f 4f       	sbci	r19, 0xFF	; 255
 56a:	fa 01       	movw	r30, r20
 56c:	e2 0f       	add	r30, r18
 56e:	f3 1f       	adc	r31, r19
 570:	80 81       	ld	r24, Z
 572:	88 23       	and	r24, r24
 574:	c1 f3       	breq	.-16     	; 0x566 <lcd_write_int+0x62>
 576:	04 c0       	rjmp	.+8      	; 0x580 <lcd_write_int+0x7c>
	else
		j=5-field_length;
 578:	25 e0       	ldi	r18, 0x05	; 5
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	20 1b       	sub	r18, r16
 57e:	31 0b       	sbc	r19, r17
 580:	7e 01       	movw	r14, r28
 582:	08 94       	sec
 584:	e1 1c       	adc	r14, r1
 586:	f1 1c       	adc	r15, r1
 588:	e2 0e       	add	r14, r18
 58a:	f3 1e       	adc	r15, r19
 58c:	89 01       	movw	r16, r18
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
 590:	f7 01       	movw	r30, r14
 592:	81 91       	ld	r24, Z+
 594:	7f 01       	movw	r14, r30
 596:	80 5d       	subi	r24, 0xD0	; 208
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
 59e:	0f 5f       	subi	r16, 0xFF	; 255
 5a0:	1f 4f       	sbci	r17, 0xFF	; 255
 5a2:	05 30       	cpi	r16, 0x05	; 5
 5a4:	11 05       	cpc	r17, r1
 5a6:	a4 f3       	brlt	.-24     	; 0x590 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	cf 91       	pop	r28
 5b4:	df 91       	pop	r29
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	08 95       	ret

000005c0 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
 5c0:	88 32       	cpi	r24, 0x28	; 40
 5c2:	30 f4       	brcc	.+12     	; 0x5d0 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
 5c4:	61 11       	cpse	r22, r1
 5c6:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
 5c8:	80 68       	ori	r24, 0x80	; 128
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_byte>
 5d0:	08 95       	ret

000005d2 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
 5d8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lcd_goto_xy>
 lcd_write_string(msg);
 5dc:	c8 01       	movw	r24, r16
 5de:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_write_string>
}
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	8a 01       	movw	r16, r20
 5f2:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
 5f4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lcd_goto_xy>
 lcd_write_int(val,fl);
 5f8:	c8 01       	movw	r24, r16
 5fa:	b7 01       	movw	r22, r14
 5fc:	0e 94 82 02 	call	0x504	; 0x504 <lcd_write_int>
}
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	ff 90       	pop	r15
 606:	ef 90       	pop	r14
 608:	08 95       	ret

0000060a <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
 60a:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
 60c:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
 60e:	87 e0       	ldi	r24, 0x07	; 7
 610:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
 612:	87 e6       	ldi	r24, 0x67	; 103
 614:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
 616:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
 618:	88 e9       	ldi	r24, 0x98	; 152
 61a:	8a b9       	out	0x0a, r24	; 10
}
 61c:	08 95       	ret

0000061e <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 61e:	5d 9b       	sbis	0x0b, 5	; 11
 620:	fe cf       	rjmp	.-4      	; 0x61e <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
 622:	8c b9       	out	0x0c, r24	; 12
}
 624:	08 95       	ret

00000626 <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
 626:	fc 01       	movw	r30, r24
 628:	04 c0       	rjmp	.+8      	; 0x632 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 62a:	5d 9b       	sbis	0x0b, 5	; 11
 62c:	fe cf       	rjmp	.-4      	; 0x62a <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
 62e:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
 630:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 632:	80 81       	ld	r24, Z
 634:	88 23       	and	r24, r24
 636:	c9 f7       	brne	.-14     	; 0x62a <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
 638:	08 95       	ret

0000063a <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 63a:	5d 9b       	sbis	0x0b, 5	; 11
 63c:	fe cf       	rjmp	.-4      	; 0x63a <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
 63e:	8a e0       	ldi	r24, 0x0A	; 10
 640:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 642:	5d 9b       	sbis	0x0b, 5	; 11
 644:	fe cf       	rjmp	.-4      	; 0x642 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
 646:	8d e0       	ldi	r24, 0x0D	; 13
 648:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
 64a:	08 95       	ret

0000064c <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
 64c:	5f 9b       	sbis	0x0b, 7	; 11
 64e:	fe cf       	rjmp	.-4      	; 0x64c <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
 650:	8c b1       	in	r24, 0x0c	; 12
}
 652:	08 95       	ret

00000654 <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	84 bb       	out	0x14, r24	; 20
}
 658:	08 95       	ret

0000065a <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
 65a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 65c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 65e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 660:	af 98       	cbi	0x15, 7	; 21
}
 662:	08 95       	ret

00000664 <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
 664:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 666:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 668:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 66a:	af 98       	cbi	0x15, 7	; 21
}
 66c:	08 95       	ret

0000066e <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
 66e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 670:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 672:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 674:	af 98       	cbi	0x15, 7	; 21
}
 676:	08 95       	ret

00000678 <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
 678:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 67a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 67c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 67e:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
 680:	08 95       	ret

00000682 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
 682:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 684:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 686:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 688:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
 68a:	08 95       	ret

0000068c <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
 68c:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 68e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 690:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
 692:	af 9a       	sbi	0x15, 7	; 21
}
 694:	08 95       	ret

00000696 <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
 696:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 698:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 69a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 69c:	af 98       	cbi	0x15, 7	; 21
}
 69e:	08 95       	ret

000006a0 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
 6a0:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 6a2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 6a4:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 6a6:	af 9a       	sbi	0x15, 7	; 21
}
 6a8:	08 95       	ret

000006aa <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
 6aa:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 6ac:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 6ae:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 6b0:	af 98       	cbi	0x15, 7	; 21
}
 6b2:	08 95       	ret

000006b4 <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
 6b4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 6b6:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 6b8:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 6ba:	af 9a       	sbi	0x15, 7	; 21
}
 6bc:	08 95       	ret

000006be <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
 6be:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 6c0:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 6c2:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 6c4:	af 98       	cbi	0x15, 7	; 21
}
 6c6:	08 95       	ret

000006c8 <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
 6c8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
 6ca:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 6cc:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
 6ce:	af 9a       	sbi	0x15, 7	; 21
}
 6d0:	08 95       	ret

000006d2 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
 6d2:	82 b3       	in	r24, 0x12	; 18
 6d4:	8f 60       	ori	r24, 0x0F	; 15
 6d6:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
 6d8:	81 b3       	in	r24, 0x11	; 17
 6da:	80 7f       	andi	r24, 0xF0	; 240
 6dc:	81 bb       	out	0x11, r24	; 17
}
 6de:	08 95       	ret

000006e0 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
 6e0:	20 b3       	in	r18, 0x10	; 16
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	20 95       	com	r18
 6e6:	30 95       	com	r19
 6e8:	21 70       	andi	r18, 0x01	; 1
 6ea:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6ec:	c9 01       	movw	r24, r18
 6ee:	08 95       	ret

000006f0 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
 6f0:	20 b3       	in	r18, 0x10	; 16
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	36 95       	lsr	r19
 6f6:	27 95       	ror	r18
 6f8:	20 95       	com	r18
 6fa:	30 95       	com	r19
 6fc:	21 70       	andi	r18, 0x01	; 1
 6fe:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 700:	c9 01       	movw	r24, r18
 702:	08 95       	ret

00000704 <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
 704:	20 b3       	in	r18, 0x10	; 16
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	36 95       	lsr	r19
 70a:	27 95       	ror	r18
 70c:	36 95       	lsr	r19
 70e:	27 95       	ror	r18
 710:	20 95       	com	r18
 712:	30 95       	com	r19
 714:	21 70       	andi	r18, 0x01	; 1
 716:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 718:	c9 01       	movw	r24, r18
 71a:	08 95       	ret

0000071c <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
 71c:	20 b3       	in	r18, 0x10	; 16
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	53 e0       	ldi	r21, 0x03	; 3
 722:	36 95       	lsr	r19
 724:	27 95       	ror	r18
 726:	5a 95       	dec	r21
 728:	e1 f7       	brne	.-8      	; 0x722 <pressed_switch3+0x6>
 72a:	20 95       	com	r18
 72c:	30 95       	com	r19
 72e:	21 70       	andi	r18, 0x01	; 1
 730:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 732:	c9 01       	movw	r24, r18
 734:	08 95       	ret

00000736 <remote>:
usart_transmit_char(13);
}
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
 736:	5f 9b       	sbis	0x0b, 7	; 11
 738:	fe cf       	rjmp	.-4      	; 0x736 <remote>
;
/* Get and return received data from buffer */
return UDR;
 73a:	9c b1       	in	r25, 0x0c	; 12
void remote()
{



ch = usart_receive_char(); //loop till character received
 73c:	90 93 7d 00 	sts	0x007D, r25
				if(ch==0x0A) // if received character is <LF> end of line, time to display
 740:	9a 30       	cpi	r25, 0x0A	; 10
 742:	01 f5       	brne	.+64     	; 0x784 <remote+0x4e>
				{
					pos = 0; // buffer position reset for next reading
 744:	10 92 63 00 	sts	0x0063, r1
					
					// extract nec data from serial buffer to 16 bit value
					necdata = ((sbuffer[2]-'0')<<4)|(sbuffer[3]-'0'); // convert data from ASCII to low byte
					necdata |= (((sbuffer[0]-'0')<<12)|(sbuffer[1]-'0'))<<8; // convert data from ASCII to high byte					
 748:	40 91 6f 00 	lds	r20, 0x006F
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	40 53       	subi	r20, 0x30	; 48
 750:	50 40       	sbci	r21, 0x00	; 0
 752:	54 2f       	mov	r21, r20
 754:	44 27       	eor	r20, r20
 756:	20 91 70 00 	lds	r18, 0x0070
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	20 53       	subi	r18, 0x30	; 48
 75e:	30 40       	sbci	r19, 0x00	; 0
 760:	64 e0       	ldi	r22, 0x04	; 4
 762:	22 0f       	add	r18, r18
 764:	33 1f       	adc	r19, r19
 766:	6a 95       	dec	r22
 768:	e1 f7       	brne	.-8      	; 0x762 <remote+0x2c>
 76a:	80 91 71 00 	lds	r24, 0x0071
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	c0 97       	sbiw	r24, 0x30	; 48
 772:	28 2b       	or	r18, r24
 774:	39 2b       	or	r19, r25
 776:	42 2b       	or	r20, r18
 778:	53 2b       	or	r21, r19
 77a:	50 93 69 00 	sts	0x0069, r21
 77e:	40 93 68 00 	sts	0x0068, r20
 782:	08 95       	ret
										
										
				}
				else { //store serial data to buffer
					sbuffer[pos] = ch;
 784:	80 91 63 00 	lds	r24, 0x0063
 788:	e8 2f       	mov	r30, r24
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	e2 59       	subi	r30, 0x92	; 146
 78e:	ff 4f       	sbci	r31, 0xFF	; 255
 790:	90 83       	st	Z, r25
					pos++;
 792:	8f 5f       	subi	r24, 0xFF	; 255
 794:	80 93 63 00 	sts	0x0063, r24
 798:	08 95       	ret

0000079a <main>:
}
void main()
{


usart_init();
 79a:	0e 94 05 03 	call	0x60a	; 0x60a <usart_init>
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	84 bb       	out	0x14, r24	; 20
bot_motion_init();

while(1)
{
remote();
 7a2:	0e 94 9b 03 	call	0x736	; 0x736 <remote>

if(necdata==18)
 7a6:	80 91 68 00 	lds	r24, 0x0068
 7aa:	90 91 69 00 	lds	r25, 0x0069
 7ae:	82 31       	cpi	r24, 0x12	; 18
 7b0:	91 05       	cpc	r25, r1
 7b2:	19 f4       	brne	.+6      	; 0x7ba <main+0x20>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
 7b4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 7b6:	ad 98       	cbi	0x15, 5	; 21
 7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <main+0x36>
{
bot_forward();
delay_millisec(500);
}
else if(necdata==22)
 7ba:	86 31       	cpi	r24, 0x16	; 22
 7bc:	91 05       	cpc	r25, r1
 7be:	19 f4       	brne	.+6      	; 0x7c6 <main+0x2c>
 MOTOR2A=1;
 MOTOR2B=0;
}
void bot_backward(void)
{
 MOTOR1A=0;
 7c0:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 7c2:	ad 9a       	sbi	0x15, 5	; 21
 7c4:	0c c0       	rjmp	.+24     	; 0x7de <main+0x44>
{
bot_backward();
delay_millisec(500);
}
else if(necdata==19)
 7c6:	83 31       	cpi	r24, 0x13	; 19
 7c8:	91 05       	cpc	r25, r1
 7ca:	29 f4       	brne	.+10     	; 0x7d6 <main+0x3c>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
 7cc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 7ce:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 7d0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 7d2:	af 98       	cbi	0x15, 7	; 21
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <main+0x48>
{
bot_spot_left();
delay_millisec(500);
}
else if(necdata==21)
 7d6:	45 97       	sbiw	r24, 0x15	; 21
 7d8:	21 f7       	brne	.-56     	; 0x7a2 <main+0x8>
}

void bot_spot_right(void)
{
MOTOR1A=1;
 7da:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 7dc:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 7de:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 7e0:	af 9a       	sbi	0x15, 7	; 21
{
bot_spot_right();
delay_millisec(500);
 7e2:	84 ef       	ldi	r24, 0xF4	; 244
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
 7ea:	db cf       	rjmp	.-74     	; 0x7a2 <main+0x8>

000007ec <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold[i]=eeprom_read_byte(eeprom_addr);
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 18 06 	call	0xc30	; 0xc30 <__eerd_byte_m16>
 7f4:	80 93 64 00 	sts	0x0064, r24
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 18 06 	call	0xc30	; 0xc30 <__eerd_byte_m16>
 800:	80 93 65 00 	sts	0x0065, r24
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 18 06 	call	0xc30	; 0xc30 <__eerd_byte_m16>
 80c:	80 93 66 00 	sts	0x0066, r24
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 18 06 	call	0xc30	; 0xc30 <__eerd_byte_m16>
 818:	80 93 67 00 	sts	0x0067, r24
		eeprom_addr++;
	}
}
 81c:	08 95       	ret

0000081e <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	50 e0       	ldi	r21, 0x00	; 0
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 diff=abs(max[i]-min[i]);	
 826:	fa 01       	movw	r30, r20
 828:	e6 59       	subi	r30, 0x96	; 150
 82a:	ff 4f       	sbci	r31, 0xFF	; 255
 82c:	90 81       	ld	r25, Z
		 threshold[i]=max[i]+(diff>>1);
 82e:	da 01       	movw	r26, r20
 830:	ac 59       	subi	r26, 0x9C	; 156
 832:	bf 4f       	sbci	r27, 0xFF	; 255
 834:	29 2f       	mov	r18, r25
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	fa 01       	movw	r30, r20
 83a:	e8 58       	subi	r30, 0x88	; 136
 83c:	ff 4f       	sbci	r31, 0xFF	; 255
 83e:	80 81       	ld	r24, Z
 840:	28 1b       	sub	r18, r24
 842:	31 09       	sbc	r19, r1
 844:	37 ff       	sbrs	r19, 7
 846:	03 c0       	rjmp	.+6      	; 0x84e <set_threshold+0x30>
 848:	30 95       	com	r19
 84a:	21 95       	neg	r18
 84c:	3f 4f       	sbci	r19, 0xFF	; 255
 84e:	82 2f       	mov	r24, r18
 850:	86 95       	lsr	r24
 852:	89 0f       	add	r24, r25
 854:	8c 93       	st	X, r24
 856:	4f 5f       	subi	r20, 0xFF	; 255
 858:	5f 4f       	sbci	r21, 0xFF	; 255

	unsigned char i,eeprom_addr=0x0000;
	char diff;
	
	
	 for(i=0;i<sensor_num;i++)
 85a:	44 30       	cpi	r20, 0x04	; 4
 85c:	51 05       	cpc	r21, r1
 85e:	19 f7       	brne	.-58     	; 0x826 <set_threshold+0x8>
 860:	c0 e0       	ldi	r28, 0x00	; 0
 862:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold[i]);
 864:	fe 01       	movw	r30, r28
 866:	ec 59       	subi	r30, 0x9C	; 156
 868:	ff 4f       	sbci	r31, 0xFF	; 255
 86a:	ce 01       	movw	r24, r28
 86c:	60 81       	ld	r22, Z
 86e:	0e 94 20 06 	call	0xc40	; 0xc40 <__eewr_byte_m16>
		 diff=abs(max[i]-min[i]);	
		 threshold[i]=max[i]+(diff>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
 872:	21 96       	adiw	r28, 0x01	; 1
 874:	c4 30       	cpi	r28, 0x04	; 4
 876:	d1 05       	cpc	r29, r1
 878:	a9 f7       	brne	.-22     	; 0x864 <set_threshold+0x46>
	{
		eeprom_write_byte(eeprom_addr,threshold[i]);
		eeprom_addr++;
	}
	 
}
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	08 95       	ret

00000880 <__cmpsf2>:
 880:	d4 d0       	rcall	.+424    	; 0xa2a <__fp_cmp>
 882:	08 f4       	brcc	.+2      	; 0x886 <__cmpsf2+0x6>
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	08 95       	ret

00000888 <__divsf3>:
 888:	0c d0       	rcall	.+24     	; 0x8a2 <__divsf3x>
 88a:	0a c1       	rjmp	.+532    	; 0xaa0 <__fp_round>
 88c:	02 d1       	rcall	.+516    	; 0xa92 <__fp_pscB>
 88e:	40 f0       	brcs	.+16     	; 0x8a0 <__divsf3+0x18>
 890:	f9 d0       	rcall	.+498    	; 0xa84 <__fp_pscA>
 892:	30 f0       	brcs	.+12     	; 0x8a0 <__divsf3+0x18>
 894:	21 f4       	brne	.+8      	; 0x89e <__divsf3+0x16>
 896:	5f 3f       	cpi	r21, 0xFF	; 255
 898:	19 f0       	breq	.+6      	; 0x8a0 <__divsf3+0x18>
 89a:	eb c0       	rjmp	.+470    	; 0xa72 <__fp_inf>
 89c:	51 11       	cpse	r21, r1
 89e:	34 c1       	rjmp	.+616    	; 0xb08 <__fp_szero>
 8a0:	ee c0       	rjmp	.+476    	; 0xa7e <__fp_nan>

000008a2 <__divsf3x>:
 8a2:	0f d1       	rcall	.+542    	; 0xac2 <__fp_split3>
 8a4:	98 f3       	brcs	.-26     	; 0x88c <__divsf3+0x4>

000008a6 <__divsf3_pse>:
 8a6:	99 23       	and	r25, r25
 8a8:	c9 f3       	breq	.-14     	; 0x89c <__divsf3+0x14>
 8aa:	55 23       	and	r21, r21
 8ac:	b1 f3       	breq	.-20     	; 0x89a <__divsf3+0x12>
 8ae:	95 1b       	sub	r25, r21
 8b0:	55 0b       	sbc	r21, r21
 8b2:	bb 27       	eor	r27, r27
 8b4:	aa 27       	eor	r26, r26
 8b6:	62 17       	cp	r22, r18
 8b8:	73 07       	cpc	r23, r19
 8ba:	84 07       	cpc	r24, r20
 8bc:	38 f0       	brcs	.+14     	; 0x8cc <__divsf3_pse+0x26>
 8be:	9f 5f       	subi	r25, 0xFF	; 255
 8c0:	5f 4f       	sbci	r21, 0xFF	; 255
 8c2:	22 0f       	add	r18, r18
 8c4:	33 1f       	adc	r19, r19
 8c6:	44 1f       	adc	r20, r20
 8c8:	aa 1f       	adc	r26, r26
 8ca:	a9 f3       	breq	.-22     	; 0x8b6 <__divsf3_pse+0x10>
 8cc:	33 d0       	rcall	.+102    	; 0x934 <__divsf3_pse+0x8e>
 8ce:	0e 2e       	mov	r0, r30
 8d0:	3a f0       	brmi	.+14     	; 0x8e0 <__divsf3_pse+0x3a>
 8d2:	e0 e8       	ldi	r30, 0x80	; 128
 8d4:	30 d0       	rcall	.+96     	; 0x936 <__divsf3_pse+0x90>
 8d6:	91 50       	subi	r25, 0x01	; 1
 8d8:	50 40       	sbci	r21, 0x00	; 0
 8da:	e6 95       	lsr	r30
 8dc:	00 1c       	adc	r0, r0
 8de:	ca f7       	brpl	.-14     	; 0x8d2 <__divsf3_pse+0x2c>
 8e0:	29 d0       	rcall	.+82     	; 0x934 <__divsf3_pse+0x8e>
 8e2:	fe 2f       	mov	r31, r30
 8e4:	27 d0       	rcall	.+78     	; 0x934 <__divsf3_pse+0x8e>
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	bb 1f       	adc	r27, r27
 8ee:	26 17       	cp	r18, r22
 8f0:	37 07       	cpc	r19, r23
 8f2:	48 07       	cpc	r20, r24
 8f4:	ab 07       	cpc	r26, r27
 8f6:	b0 e8       	ldi	r27, 0x80	; 128
 8f8:	09 f0       	breq	.+2      	; 0x8fc <__divsf3_pse+0x56>
 8fa:	bb 0b       	sbc	r27, r27
 8fc:	80 2d       	mov	r24, r0
 8fe:	bf 01       	movw	r22, r30
 900:	ff 27       	eor	r31, r31
 902:	93 58       	subi	r25, 0x83	; 131
 904:	5f 4f       	sbci	r21, 0xFF	; 255
 906:	2a f0       	brmi	.+10     	; 0x912 <__divsf3_pse+0x6c>
 908:	9e 3f       	cpi	r25, 0xFE	; 254
 90a:	51 05       	cpc	r21, r1
 90c:	68 f0       	brcs	.+26     	; 0x928 <__divsf3_pse+0x82>
 90e:	b1 c0       	rjmp	.+354    	; 0xa72 <__fp_inf>
 910:	fb c0       	rjmp	.+502    	; 0xb08 <__fp_szero>
 912:	5f 3f       	cpi	r21, 0xFF	; 255
 914:	ec f3       	brlt	.-6      	; 0x910 <__divsf3_pse+0x6a>
 916:	98 3e       	cpi	r25, 0xE8	; 232
 918:	dc f3       	brlt	.-10     	; 0x910 <__divsf3_pse+0x6a>
 91a:	86 95       	lsr	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b7 95       	ror	r27
 922:	f7 95       	ror	r31
 924:	9f 5f       	subi	r25, 0xFF	; 255
 926:	c9 f7       	brne	.-14     	; 0x91a <__divsf3_pse+0x74>
 928:	88 0f       	add	r24, r24
 92a:	91 1d       	adc	r25, r1
 92c:	96 95       	lsr	r25
 92e:	87 95       	ror	r24
 930:	97 f9       	bld	r25, 7
 932:	08 95       	ret
 934:	e1 e0       	ldi	r30, 0x01	; 1
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	bb 1f       	adc	r27, r27
 93e:	62 17       	cp	r22, r18
 940:	73 07       	cpc	r23, r19
 942:	84 07       	cpc	r24, r20
 944:	ba 07       	cpc	r27, r26
 946:	20 f0       	brcs	.+8      	; 0x950 <__divsf3_pse+0xaa>
 948:	62 1b       	sub	r22, r18
 94a:	73 0b       	sbc	r23, r19
 94c:	84 0b       	sbc	r24, r20
 94e:	ba 0b       	sbc	r27, r26
 950:	ee 1f       	adc	r30, r30
 952:	88 f7       	brcc	.-30     	; 0x936 <__divsf3_pse+0x90>
 954:	e0 95       	com	r30
 956:	08 95       	ret

00000958 <__fixunssfsi>:
 958:	bc d0       	rcall	.+376    	; 0xad2 <__fp_splitA>
 95a:	88 f0       	brcs	.+34     	; 0x97e <__fixunssfsi+0x26>
 95c:	9f 57       	subi	r25, 0x7F	; 127
 95e:	90 f0       	brcs	.+36     	; 0x984 <__fixunssfsi+0x2c>
 960:	b9 2f       	mov	r27, r25
 962:	99 27       	eor	r25, r25
 964:	b7 51       	subi	r27, 0x17	; 23
 966:	a0 f0       	brcs	.+40     	; 0x990 <__fixunssfsi+0x38>
 968:	d1 f0       	breq	.+52     	; 0x99e <__fixunssfsi+0x46>
 96a:	66 0f       	add	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	1a f0       	brmi	.+6      	; 0x97a <__fixunssfsi+0x22>
 974:	ba 95       	dec	r27
 976:	c9 f7       	brne	.-14     	; 0x96a <__fixunssfsi+0x12>
 978:	12 c0       	rjmp	.+36     	; 0x99e <__fixunssfsi+0x46>
 97a:	b1 30       	cpi	r27, 0x01	; 1
 97c:	81 f0       	breq	.+32     	; 0x99e <__fixunssfsi+0x46>
 97e:	c3 d0       	rcall	.+390    	; 0xb06 <__fp_zero>
 980:	b1 e0       	ldi	r27, 0x01	; 1
 982:	08 95       	ret
 984:	c0 c0       	rjmp	.+384    	; 0xb06 <__fp_zero>
 986:	67 2f       	mov	r22, r23
 988:	78 2f       	mov	r23, r24
 98a:	88 27       	eor	r24, r24
 98c:	b8 5f       	subi	r27, 0xF8	; 248
 98e:	39 f0       	breq	.+14     	; 0x99e <__fixunssfsi+0x46>
 990:	b9 3f       	cpi	r27, 0xF9	; 249
 992:	cc f3       	brlt	.-14     	; 0x986 <__fixunssfsi+0x2e>
 994:	86 95       	lsr	r24
 996:	77 95       	ror	r23
 998:	67 95       	ror	r22
 99a:	b3 95       	inc	r27
 99c:	d9 f7       	brne	.-10     	; 0x994 <__fixunssfsi+0x3c>
 99e:	3e f4       	brtc	.+14     	; 0x9ae <__fixunssfsi+0x56>
 9a0:	90 95       	com	r25
 9a2:	80 95       	com	r24
 9a4:	70 95       	com	r23
 9a6:	61 95       	neg	r22
 9a8:	7f 4f       	sbci	r23, 0xFF	; 255
 9aa:	8f 4f       	sbci	r24, 0xFF	; 255
 9ac:	9f 4f       	sbci	r25, 0xFF	; 255
 9ae:	08 95       	ret

000009b0 <__floatunsisf>:
 9b0:	e8 94       	clt
 9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <__floatsisf+0x12>

000009b4 <__floatsisf>:
 9b4:	97 fb       	bst	r25, 7
 9b6:	3e f4       	brtc	.+14     	; 0x9c6 <__floatsisf+0x12>
 9b8:	90 95       	com	r25
 9ba:	80 95       	com	r24
 9bc:	70 95       	com	r23
 9be:	61 95       	neg	r22
 9c0:	7f 4f       	sbci	r23, 0xFF	; 255
 9c2:	8f 4f       	sbci	r24, 0xFF	; 255
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
 9c6:	99 23       	and	r25, r25
 9c8:	a9 f0       	breq	.+42     	; 0x9f4 <__floatsisf+0x40>
 9ca:	f9 2f       	mov	r31, r25
 9cc:	96 e9       	ldi	r25, 0x96	; 150
 9ce:	bb 27       	eor	r27, r27
 9d0:	93 95       	inc	r25
 9d2:	f6 95       	lsr	r31
 9d4:	87 95       	ror	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	b7 95       	ror	r27
 9dc:	f1 11       	cpse	r31, r1
 9de:	f8 cf       	rjmp	.-16     	; 0x9d0 <__floatsisf+0x1c>
 9e0:	fa f4       	brpl	.+62     	; 0xa20 <__floatsisf+0x6c>
 9e2:	bb 0f       	add	r27, r27
 9e4:	11 f4       	brne	.+4      	; 0x9ea <__floatsisf+0x36>
 9e6:	60 ff       	sbrs	r22, 0
 9e8:	1b c0       	rjmp	.+54     	; 0xa20 <__floatsisf+0x6c>
 9ea:	6f 5f       	subi	r22, 0xFF	; 255
 9ec:	7f 4f       	sbci	r23, 0xFF	; 255
 9ee:	8f 4f       	sbci	r24, 0xFF	; 255
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	16 c0       	rjmp	.+44     	; 0xa20 <__floatsisf+0x6c>
 9f4:	88 23       	and	r24, r24
 9f6:	11 f0       	breq	.+4      	; 0x9fc <__floatsisf+0x48>
 9f8:	96 e9       	ldi	r25, 0x96	; 150
 9fa:	11 c0       	rjmp	.+34     	; 0xa1e <__floatsisf+0x6a>
 9fc:	77 23       	and	r23, r23
 9fe:	21 f0       	breq	.+8      	; 0xa08 <__floatsisf+0x54>
 a00:	9e e8       	ldi	r25, 0x8E	; 142
 a02:	87 2f       	mov	r24, r23
 a04:	76 2f       	mov	r23, r22
 a06:	05 c0       	rjmp	.+10     	; 0xa12 <__floatsisf+0x5e>
 a08:	66 23       	and	r22, r22
 a0a:	71 f0       	breq	.+28     	; 0xa28 <__floatsisf+0x74>
 a0c:	96 e8       	ldi	r25, 0x86	; 134
 a0e:	86 2f       	mov	r24, r22
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	2a f0       	brmi	.+10     	; 0xa20 <__floatsisf+0x6c>
 a16:	9a 95       	dec	r25
 a18:	66 0f       	add	r22, r22
 a1a:	77 1f       	adc	r23, r23
 a1c:	88 1f       	adc	r24, r24
 a1e:	da f7       	brpl	.-10     	; 0xa16 <__floatsisf+0x62>
 a20:	88 0f       	add	r24, r24
 a22:	96 95       	lsr	r25
 a24:	87 95       	ror	r24
 a26:	97 f9       	bld	r25, 7
 a28:	08 95       	ret

00000a2a <__fp_cmp>:
 a2a:	99 0f       	add	r25, r25
 a2c:	00 08       	sbc	r0, r0
 a2e:	55 0f       	add	r21, r21
 a30:	aa 0b       	sbc	r26, r26
 a32:	e0 e8       	ldi	r30, 0x80	; 128
 a34:	fe ef       	ldi	r31, 0xFE	; 254
 a36:	16 16       	cp	r1, r22
 a38:	17 06       	cpc	r1, r23
 a3a:	e8 07       	cpc	r30, r24
 a3c:	f9 07       	cpc	r31, r25
 a3e:	c0 f0       	brcs	.+48     	; 0xa70 <__fp_cmp+0x46>
 a40:	12 16       	cp	r1, r18
 a42:	13 06       	cpc	r1, r19
 a44:	e4 07       	cpc	r30, r20
 a46:	f5 07       	cpc	r31, r21
 a48:	98 f0       	brcs	.+38     	; 0xa70 <__fp_cmp+0x46>
 a4a:	62 1b       	sub	r22, r18
 a4c:	73 0b       	sbc	r23, r19
 a4e:	84 0b       	sbc	r24, r20
 a50:	95 0b       	sbc	r25, r21
 a52:	39 f4       	brne	.+14     	; 0xa62 <__fp_cmp+0x38>
 a54:	0a 26       	eor	r0, r26
 a56:	61 f0       	breq	.+24     	; 0xa70 <__fp_cmp+0x46>
 a58:	23 2b       	or	r18, r19
 a5a:	24 2b       	or	r18, r20
 a5c:	25 2b       	or	r18, r21
 a5e:	21 f4       	brne	.+8      	; 0xa68 <__fp_cmp+0x3e>
 a60:	08 95       	ret
 a62:	0a 26       	eor	r0, r26
 a64:	09 f4       	brne	.+2      	; 0xa68 <__fp_cmp+0x3e>
 a66:	a1 40       	sbci	r26, 0x01	; 1
 a68:	a6 95       	lsr	r26
 a6a:	8f ef       	ldi	r24, 0xFF	; 255
 a6c:	81 1d       	adc	r24, r1
 a6e:	81 1d       	adc	r24, r1
 a70:	08 95       	ret

00000a72 <__fp_inf>:
 a72:	97 f9       	bld	r25, 7
 a74:	9f 67       	ori	r25, 0x7F	; 127
 a76:	80 e8       	ldi	r24, 0x80	; 128
 a78:	70 e0       	ldi	r23, 0x00	; 0
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	08 95       	ret

00000a7e <__fp_nan>:
 a7e:	9f ef       	ldi	r25, 0xFF	; 255
 a80:	80 ec       	ldi	r24, 0xC0	; 192
 a82:	08 95       	ret

00000a84 <__fp_pscA>:
 a84:	00 24       	eor	r0, r0
 a86:	0a 94       	dec	r0
 a88:	16 16       	cp	r1, r22
 a8a:	17 06       	cpc	r1, r23
 a8c:	18 06       	cpc	r1, r24
 a8e:	09 06       	cpc	r0, r25
 a90:	08 95       	ret

00000a92 <__fp_pscB>:
 a92:	00 24       	eor	r0, r0
 a94:	0a 94       	dec	r0
 a96:	12 16       	cp	r1, r18
 a98:	13 06       	cpc	r1, r19
 a9a:	14 06       	cpc	r1, r20
 a9c:	05 06       	cpc	r0, r21
 a9e:	08 95       	ret

00000aa0 <__fp_round>:
 aa0:	09 2e       	mov	r0, r25
 aa2:	03 94       	inc	r0
 aa4:	00 0c       	add	r0, r0
 aa6:	11 f4       	brne	.+4      	; 0xaac <__fp_round+0xc>
 aa8:	88 23       	and	r24, r24
 aaa:	52 f0       	brmi	.+20     	; 0xac0 <__fp_round+0x20>
 aac:	bb 0f       	add	r27, r27
 aae:	40 f4       	brcc	.+16     	; 0xac0 <__fp_round+0x20>
 ab0:	bf 2b       	or	r27, r31
 ab2:	11 f4       	brne	.+4      	; 0xab8 <__fp_round+0x18>
 ab4:	60 ff       	sbrs	r22, 0
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__fp_round+0x20>
 ab8:	6f 5f       	subi	r22, 0xFF	; 255
 aba:	7f 4f       	sbci	r23, 0xFF	; 255
 abc:	8f 4f       	sbci	r24, 0xFF	; 255
 abe:	9f 4f       	sbci	r25, 0xFF	; 255
 ac0:	08 95       	ret

00000ac2 <__fp_split3>:
 ac2:	57 fd       	sbrc	r21, 7
 ac4:	90 58       	subi	r25, 0x80	; 128
 ac6:	44 0f       	add	r20, r20
 ac8:	55 1f       	adc	r21, r21
 aca:	59 f0       	breq	.+22     	; 0xae2 <__fp_splitA+0x10>
 acc:	5f 3f       	cpi	r21, 0xFF	; 255
 ace:	71 f0       	breq	.+28     	; 0xaec <__fp_splitA+0x1a>
 ad0:	47 95       	ror	r20

00000ad2 <__fp_splitA>:
 ad2:	88 0f       	add	r24, r24
 ad4:	97 fb       	bst	r25, 7
 ad6:	99 1f       	adc	r25, r25
 ad8:	61 f0       	breq	.+24     	; 0xaf2 <__fp_splitA+0x20>
 ada:	9f 3f       	cpi	r25, 0xFF	; 255
 adc:	79 f0       	breq	.+30     	; 0xafc <__fp_splitA+0x2a>
 ade:	87 95       	ror	r24
 ae0:	08 95       	ret
 ae2:	12 16       	cp	r1, r18
 ae4:	13 06       	cpc	r1, r19
 ae6:	14 06       	cpc	r1, r20
 ae8:	55 1f       	adc	r21, r21
 aea:	f2 cf       	rjmp	.-28     	; 0xad0 <__fp_split3+0xe>
 aec:	46 95       	lsr	r20
 aee:	f1 df       	rcall	.-30     	; 0xad2 <__fp_splitA>
 af0:	08 c0       	rjmp	.+16     	; 0xb02 <__fp_splitA+0x30>
 af2:	16 16       	cp	r1, r22
 af4:	17 06       	cpc	r1, r23
 af6:	18 06       	cpc	r1, r24
 af8:	99 1f       	adc	r25, r25
 afa:	f1 cf       	rjmp	.-30     	; 0xade <__fp_splitA+0xc>
 afc:	86 95       	lsr	r24
 afe:	71 05       	cpc	r23, r1
 b00:	61 05       	cpc	r22, r1
 b02:	08 94       	sec
 b04:	08 95       	ret

00000b06 <__fp_zero>:
 b06:	e8 94       	clt

00000b08 <__fp_szero>:
 b08:	bb 27       	eor	r27, r27
 b0a:	66 27       	eor	r22, r22
 b0c:	77 27       	eor	r23, r23
 b0e:	cb 01       	movw	r24, r22
 b10:	97 f9       	bld	r25, 7
 b12:	08 95       	ret

00000b14 <__gesf2>:
 b14:	8a df       	rcall	.-236    	; 0xa2a <__fp_cmp>
 b16:	08 f4       	brcc	.+2      	; 0xb1a <__gesf2+0x6>
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	08 95       	ret

00000b1c <__mulsf3>:
 b1c:	0b d0       	rcall	.+22     	; 0xb34 <__mulsf3x>
 b1e:	c0 cf       	rjmp	.-128    	; 0xaa0 <__fp_round>
 b20:	b1 df       	rcall	.-158    	; 0xa84 <__fp_pscA>
 b22:	28 f0       	brcs	.+10     	; 0xb2e <__mulsf3+0x12>
 b24:	b6 df       	rcall	.-148    	; 0xa92 <__fp_pscB>
 b26:	18 f0       	brcs	.+6      	; 0xb2e <__mulsf3+0x12>
 b28:	95 23       	and	r25, r21
 b2a:	09 f0       	breq	.+2      	; 0xb2e <__mulsf3+0x12>
 b2c:	a2 cf       	rjmp	.-188    	; 0xa72 <__fp_inf>
 b2e:	a7 cf       	rjmp	.-178    	; 0xa7e <__fp_nan>
 b30:	11 24       	eor	r1, r1
 b32:	ea cf       	rjmp	.-44     	; 0xb08 <__fp_szero>

00000b34 <__mulsf3x>:
 b34:	c6 df       	rcall	.-116    	; 0xac2 <__fp_split3>
 b36:	a0 f3       	brcs	.-24     	; 0xb20 <__mulsf3+0x4>

00000b38 <__mulsf3_pse>:
 b38:	95 9f       	mul	r25, r21
 b3a:	d1 f3       	breq	.-12     	; 0xb30 <__mulsf3+0x14>
 b3c:	95 0f       	add	r25, r21
 b3e:	50 e0       	ldi	r21, 0x00	; 0
 b40:	55 1f       	adc	r21, r21
 b42:	62 9f       	mul	r22, r18
 b44:	f0 01       	movw	r30, r0
 b46:	72 9f       	mul	r23, r18
 b48:	bb 27       	eor	r27, r27
 b4a:	f0 0d       	add	r31, r0
 b4c:	b1 1d       	adc	r27, r1
 b4e:	63 9f       	mul	r22, r19
 b50:	aa 27       	eor	r26, r26
 b52:	f0 0d       	add	r31, r0
 b54:	b1 1d       	adc	r27, r1
 b56:	aa 1f       	adc	r26, r26
 b58:	64 9f       	mul	r22, r20
 b5a:	66 27       	eor	r22, r22
 b5c:	b0 0d       	add	r27, r0
 b5e:	a1 1d       	adc	r26, r1
 b60:	66 1f       	adc	r22, r22
 b62:	82 9f       	mul	r24, r18
 b64:	22 27       	eor	r18, r18
 b66:	b0 0d       	add	r27, r0
 b68:	a1 1d       	adc	r26, r1
 b6a:	62 1f       	adc	r22, r18
 b6c:	73 9f       	mul	r23, r19
 b6e:	b0 0d       	add	r27, r0
 b70:	a1 1d       	adc	r26, r1
 b72:	62 1f       	adc	r22, r18
 b74:	83 9f       	mul	r24, r19
 b76:	a0 0d       	add	r26, r0
 b78:	61 1d       	adc	r22, r1
 b7a:	22 1f       	adc	r18, r18
 b7c:	74 9f       	mul	r23, r20
 b7e:	33 27       	eor	r19, r19
 b80:	a0 0d       	add	r26, r0
 b82:	61 1d       	adc	r22, r1
 b84:	23 1f       	adc	r18, r19
 b86:	84 9f       	mul	r24, r20
 b88:	60 0d       	add	r22, r0
 b8a:	21 1d       	adc	r18, r1
 b8c:	82 2f       	mov	r24, r18
 b8e:	76 2f       	mov	r23, r22
 b90:	6a 2f       	mov	r22, r26
 b92:	11 24       	eor	r1, r1
 b94:	9f 57       	subi	r25, 0x7F	; 127
 b96:	50 40       	sbci	r21, 0x00	; 0
 b98:	8a f0       	brmi	.+34     	; 0xbbc <__mulsf3_pse+0x84>
 b9a:	e1 f0       	breq	.+56     	; 0xbd4 <__mulsf3_pse+0x9c>
 b9c:	88 23       	and	r24, r24
 b9e:	4a f0       	brmi	.+18     	; 0xbb2 <__mulsf3_pse+0x7a>
 ba0:	ee 0f       	add	r30, r30
 ba2:	ff 1f       	adc	r31, r31
 ba4:	bb 1f       	adc	r27, r27
 ba6:	66 1f       	adc	r22, r22
 ba8:	77 1f       	adc	r23, r23
 baa:	88 1f       	adc	r24, r24
 bac:	91 50       	subi	r25, 0x01	; 1
 bae:	50 40       	sbci	r21, 0x00	; 0
 bb0:	a9 f7       	brne	.-22     	; 0xb9c <__mulsf3_pse+0x64>
 bb2:	9e 3f       	cpi	r25, 0xFE	; 254
 bb4:	51 05       	cpc	r21, r1
 bb6:	70 f0       	brcs	.+28     	; 0xbd4 <__mulsf3_pse+0x9c>
 bb8:	5c cf       	rjmp	.-328    	; 0xa72 <__fp_inf>
 bba:	a6 cf       	rjmp	.-180    	; 0xb08 <__fp_szero>
 bbc:	5f 3f       	cpi	r21, 0xFF	; 255
 bbe:	ec f3       	brlt	.-6      	; 0xbba <__mulsf3_pse+0x82>
 bc0:	98 3e       	cpi	r25, 0xE8	; 232
 bc2:	dc f3       	brlt	.-10     	; 0xbba <__mulsf3_pse+0x82>
 bc4:	86 95       	lsr	r24
 bc6:	77 95       	ror	r23
 bc8:	67 95       	ror	r22
 bca:	b7 95       	ror	r27
 bcc:	f7 95       	ror	r31
 bce:	e7 95       	ror	r30
 bd0:	9f 5f       	subi	r25, 0xFF	; 255
 bd2:	c1 f7       	brne	.-16     	; 0xbc4 <__mulsf3_pse+0x8c>
 bd4:	fe 2b       	or	r31, r30
 bd6:	88 0f       	add	r24, r24
 bd8:	91 1d       	adc	r25, r1
 bda:	96 95       	lsr	r25
 bdc:	87 95       	ror	r24
 bde:	97 f9       	bld	r25, 7
 be0:	08 95       	ret

00000be2 <__divmodhi4>:
 be2:	97 fb       	bst	r25, 7
 be4:	09 2e       	mov	r0, r25
 be6:	07 26       	eor	r0, r23
 be8:	0a d0       	rcall	.+20     	; 0xbfe <__divmodhi4_neg1>
 bea:	77 fd       	sbrc	r23, 7
 bec:	04 d0       	rcall	.+8      	; 0xbf6 <__divmodhi4_neg2>
 bee:	0c d0       	rcall	.+24     	; 0xc08 <__udivmodhi4>
 bf0:	06 d0       	rcall	.+12     	; 0xbfe <__divmodhi4_neg1>
 bf2:	00 20       	and	r0, r0
 bf4:	1a f4       	brpl	.+6      	; 0xbfc <__divmodhi4_exit>

00000bf6 <__divmodhi4_neg2>:
 bf6:	70 95       	com	r23
 bf8:	61 95       	neg	r22
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255

00000bfc <__divmodhi4_exit>:
 bfc:	08 95       	ret

00000bfe <__divmodhi4_neg1>:
 bfe:	f6 f7       	brtc	.-4      	; 0xbfc <__divmodhi4_exit>
 c00:	90 95       	com	r25
 c02:	81 95       	neg	r24
 c04:	9f 4f       	sbci	r25, 0xFF	; 255
 c06:	08 95       	ret

00000c08 <__udivmodhi4>:
 c08:	aa 1b       	sub	r26, r26
 c0a:	bb 1b       	sub	r27, r27
 c0c:	51 e1       	ldi	r21, 0x11	; 17
 c0e:	07 c0       	rjmp	.+14     	; 0xc1e <__udivmodhi4_ep>

00000c10 <__udivmodhi4_loop>:
 c10:	aa 1f       	adc	r26, r26
 c12:	bb 1f       	adc	r27, r27
 c14:	a6 17       	cp	r26, r22
 c16:	b7 07       	cpc	r27, r23
 c18:	10 f0       	brcs	.+4      	; 0xc1e <__udivmodhi4_ep>
 c1a:	a6 1b       	sub	r26, r22
 c1c:	b7 0b       	sbc	r27, r23

00000c1e <__udivmodhi4_ep>:
 c1e:	88 1f       	adc	r24, r24
 c20:	99 1f       	adc	r25, r25
 c22:	5a 95       	dec	r21
 c24:	a9 f7       	brne	.-22     	; 0xc10 <__udivmodhi4_loop>
 c26:	80 95       	com	r24
 c28:	90 95       	com	r25
 c2a:	bc 01       	movw	r22, r24
 c2c:	cd 01       	movw	r24, r26
 c2e:	08 95       	ret

00000c30 <__eerd_byte_m16>:
 c30:	e1 99       	sbic	0x1c, 1	; 28
 c32:	fe cf       	rjmp	.-4      	; 0xc30 <__eerd_byte_m16>
 c34:	9f bb       	out	0x1f, r25	; 31
 c36:	8e bb       	out	0x1e, r24	; 30
 c38:	e0 9a       	sbi	0x1c, 0	; 28
 c3a:	99 27       	eor	r25, r25
 c3c:	8d b3       	in	r24, 0x1d	; 29
 c3e:	08 95       	ret

00000c40 <__eewr_byte_m16>:
 c40:	26 2f       	mov	r18, r22

00000c42 <__eewr_r18_m16>:
 c42:	e1 99       	sbic	0x1c, 1	; 28
 c44:	fe cf       	rjmp	.-4      	; 0xc42 <__eewr_r18_m16>
 c46:	9f bb       	out	0x1f, r25	; 31
 c48:	8e bb       	out	0x1e, r24	; 30
 c4a:	2d bb       	out	0x1d, r18	; 29
 c4c:	0f b6       	in	r0, 0x3f	; 63
 c4e:	f8 94       	cli
 c50:	e2 9a       	sbi	0x1c, 2	; 28
 c52:	e1 9a       	sbi	0x1c, 1	; 28
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	01 96       	adiw	r24, 0x01	; 1
 c58:	08 95       	ret

00000c5a <_exit>:
 c5a:	f8 94       	cli

00000c5c <__stop_program>:
 c5c:	ff cf       	rjmp	.-2      	; 0xc5c <__stop_program>
