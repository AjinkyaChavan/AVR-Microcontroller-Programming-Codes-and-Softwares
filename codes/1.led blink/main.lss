
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c1c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000d  00800060  00800060  00000c90  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000039a  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000eaa  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000032b  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d0f  00000000  00000000  0000221f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000310  00000000  00000000  00002f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003f0  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000069e  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00003cce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 36       	cpi	r26, 0x6D	; 109
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 cd 03 	call	0x79a	; 0x79a <main>
  74:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <port_init>:
unsigned char sensorbyte=0;

//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
  80:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
  82:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
  84:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
  86:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
  88:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
  8a:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
  8c:	11 ba       	out	0x11, r1	; 17
}
  8e:	08 95       	ret

00000090 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
  90:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
  92:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
  94:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
  96:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
  98:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
  9a:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
  9c:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
  9e:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
  a0:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;
  a6:	8f e8       	ldi	r24, 0x8F	; 143
  a8:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
  aa:	82 ea       	ldi	r24, 0xA2	; 162
  ac:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
  ae:	89 e1       	ldi	r24, 0x19	; 25
  b0:	8e bd       	out	0x2e, r24	; 46
}
  b2:	08 95       	ret

000000b4 <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
  b4:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
  b6:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
  bc:	87 e8       	ldi	r24, 0x87	; 135
  be:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	88 b9       	out	0x08, r24	; 8
}
  c4:	08 95       	ret

000000c6 <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
  c6:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
  c8:	87 70       	andi	r24, 0x07	; 7
  ca:	80 66       	ori	r24, 0x60	; 96
  cc:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
  ce:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
  d0:	36 99       	sbic	0x06, 6	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
  d4:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
  d6:	08 95       	ret

000000d8 <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
  d8:	ac 01       	movw	r20, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	60 e9       	ldi	r22, 0x90	; 144
  de:	71 e0       	ldi	r23, 0x01	; 1
  e0:	0c c0       	rjmp	.+24     	; 0xfa <delay_sec+0x22>
  e2:	fb 01       	movw	r30, r22
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	24 30       	cpi	r18, 0x04	; 4
  f0:	19 f0       	breq	.+6      	; 0xf8 <delay_sec+0x20>
  f2:	84 ec       	ldi	r24, 0xC4	; 196
  f4:	99 e0       	ldi	r25, 0x09	; 9
  f6:	f5 cf       	rjmp	.-22     	; 0xe2 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
  f8:	3f 5f       	subi	r19, 0xFF	; 255
  fa:	83 2f       	mov	r24, r19
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	84 17       	cp	r24, r20
 100:	95 07       	cpc	r25, r21
 102:	14 f4       	brge	.+4      	; 0x108 <delay_sec+0x30>
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <delay_sec+0x1a>
 108:	08 95       	ret

0000010a <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
 10a:	af 92       	push	r10
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
	_delay_ms(n);
 11a:	aa 27       	eor	r26, r26
 11c:	97 fd       	sbrc	r25, 7
 11e:	a0 95       	com	r26
 120:	ba 2f       	mov	r27, r26
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	0e 94 b9 04 	call	0x972	; 0x972 <__floatsisf>
 12a:	5b 01       	movw	r10, r22
 12c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	4a e7       	ldi	r20, 0x7A	; 122
 134:	55 e4       	ldi	r21, 0x45	; 69
 136:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 13a:	7b 01       	movw	r14, r22
 13c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e8       	ldi	r20, 0x80	; 128
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	0e 94 1f 04 	call	0x83e	; 0x83e <__cmpsf2>
 14a:	88 23       	and	r24, r24
 14c:	1c f4       	brge	.+6      	; 0x154 <delay_millisec+0x4a>
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	24 c0       	rjmp	.+72     	; 0x19c <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
 154:	c8 01       	movw	r24, r16
 156:	b7 01       	movw	r22, r14
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	3f ef       	ldi	r19, 0xFF	; 255
 15c:	4f e7       	ldi	r20, 0x7F	; 127
 15e:	57 e4       	ldi	r21, 0x47	; 71
 160:	0e 94 69 05 	call	0xad2	; 0xad2 <__gesf2>
 164:	18 16       	cp	r1, r24
 166:	b4 f4       	brge	.+44     	; 0x194 <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 168:	c6 01       	movw	r24, r12
 16a:	b5 01       	movw	r22, r10
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e2       	ldi	r20, 0x20	; 32
 172:	51 e4       	ldi	r21, 0x41	; 65
 174:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 178:	0e 94 8b 04 	call	0x916	; 0x916 <__fixunssfsi>
 17c:	80 e9       	ldi	r24, 0x90	; 144
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	05 c0       	rjmp	.+10     	; 0x18c <delay_millisec+0x82>
 182:	fc 01       	movw	r30, r24
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 188:	61 50       	subi	r22, 0x01	; 1
 18a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	61 15       	cp	r22, r1
 18e:	71 05       	cpc	r23, r1
 190:	c1 f7       	brne	.-16     	; 0x182 <delay_millisec+0x78>
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 194:	c8 01       	movw	r24, r16
 196:	b7 01       	movw	r22, r14
 198:	0e 94 8b 04 	call	0x916	; 0x916 <__fixunssfsi>
 19c:	cb 01       	movw	r24, r22
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <delay_millisec+0x94>
}
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	bf 90       	pop	r11
 1b0:	af 90       	pop	r10
 1b2:	08 95       	ret

000001b4 <delay_microsec>:

void delay_microsec(int n)
{
 1b4:	af 92       	push	r10
 1b6:	bf 92       	push	r11
 1b8:	cf 92       	push	r12
 1ba:	df 92       	push	r13
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
	_delay_us(n);
 1c4:	aa 27       	eor	r26, r26
 1c6:	97 fd       	sbrc	r25, 7
 1c8:	a0 95       	com	r26
 1ca:	ba 2f       	mov	r27, r26
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	0e 94 b9 04 	call	0x972	; 0x972 <__floatsisf>
 1d4:	5b 01       	movw	r10, r22
 1d6:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 1d8:	2b ea       	ldi	r18, 0xAB	; 171
 1da:	3a ea       	ldi	r19, 0xAA	; 170
 1dc:	4a ea       	ldi	r20, 0xAA	; 170
 1de:	50 e4       	ldi	r21, 0x40	; 64
 1e0:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 1e4:	7b 01       	movw	r14, r22
 1e6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e8       	ldi	r20, 0x80	; 128
 1ee:	5f e3       	ldi	r21, 0x3F	; 63
 1f0:	0e 94 1f 04 	call	0x83e	; 0x83e <__cmpsf2>
 1f4:	88 23       	and	r24, r24
 1f6:	14 f4       	brge	.+4      	; 0x1fc <delay_microsec+0x48>
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	54 c0       	rjmp	.+168    	; 0x2a4 <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
 1fc:	c8 01       	movw	r24, r16
 1fe:	b7 01       	movw	r22, r14
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4f e7       	ldi	r20, 0x7F	; 127
 206:	53 e4       	ldi	r21, 0x43	; 67
 208:	0e 94 69 05 	call	0xad2	; 0xad2 <__gesf2>
 20c:	18 16       	cp	r1, r24
 20e:	0c f0       	brlt	.+2      	; 0x212 <delay_microsec+0x5e>
 210:	45 c0       	rjmp	.+138    	; 0x29c <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
 212:	c6 01       	movw	r24, r12
 214:	b5 01       	movw	r22, r10
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	4a e7       	ldi	r20, 0x7A	; 122
 21c:	54 e4       	ldi	r21, 0x44	; 68
 21e:	0e 94 23 04 	call	0x846	; 0x846 <__divsf3>
 222:	5b 01       	movw	r10, r22
 224:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	4a e7       	ldi	r20, 0x7A	; 122
 22c:	55 e4       	ldi	r21, 0x45	; 69
 22e:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 232:	7b 01       	movw	r14, r22
 234:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e8       	ldi	r20, 0x80	; 128
 23c:	5f e3       	ldi	r21, 0x3F	; 63
 23e:	0e 94 1f 04 	call	0x83e	; 0x83e <__cmpsf2>
 242:	88 23       	and	r24, r24
 244:	1c f4       	brge	.+6      	; 0x24c <delay_microsec+0x98>
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	24 c0       	rjmp	.+72     	; 0x294 <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
 24c:	c8 01       	movw	r24, r16
 24e:	b7 01       	movw	r22, r14
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	3f ef       	ldi	r19, 0xFF	; 255
 254:	4f e7       	ldi	r20, 0x7F	; 127
 256:	57 e4       	ldi	r21, 0x47	; 71
 258:	0e 94 69 05 	call	0xad2	; 0xad2 <__gesf2>
 25c:	18 16       	cp	r1, r24
 25e:	b4 f4       	brge	.+44     	; 0x28c <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 260:	c6 01       	movw	r24, r12
 262:	b5 01       	movw	r22, r10
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e2       	ldi	r20, 0x20	; 32
 26a:	51 e4       	ldi	r21, 0x41	; 65
 26c:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 270:	0e 94 8b 04 	call	0x916	; 0x916 <__fixunssfsi>
 274:	80 e9       	ldi	r24, 0x90	; 144
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	05 c0       	rjmp	.+10     	; 0x284 <delay_microsec+0xd0>
 27a:	fc 01       	movw	r30, r24
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	61 50       	subi	r22, 0x01	; 1
 282:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	61 15       	cp	r22, r1
 286:	71 05       	cpc	r23, r1
 288:	c1 f7       	brne	.-16     	; 0x27a <delay_microsec+0xc6>
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 28c:	c8 01       	movw	r24, r16
 28e:	b7 01       	movw	r22, r14
 290:	0e 94 8b 04 	call	0x916	; 0x916 <__fixunssfsi>
 294:	cb 01       	movw	r24, r22
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <delay_microsec+0xe2>
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 29c:	c8 01       	movw	r24, r16
 29e:	b7 01       	movw	r22, r14
 2a0:	0e 94 8b 04 	call	0x916	; 0x916 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a4:	6a 95       	dec	r22
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <delay_microsec+0xf0>
}
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	bf 90       	pop	r11
 2b6:	af 90       	pop	r10
 2b8:	08 95       	ret

000002ba <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
sensorbyte=0;
 2c4:	10 92 60 00 	sts	0x0060, r1
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]>threshold[i])
	  sensorbyte|=(1<<i);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	e8 2e       	mov	r14, r24
 2d0:	f1 2c       	mov	r15, r1
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
	  if(temp[i]>threshold[i])
 2d8:	fe 01       	movw	r30, r28
 2da:	ef 59       	subi	r30, 0x9F	; 159
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	90 81       	ld	r25, Z
 2e0:	98 17       	cp	r25, r24
 2e2:	60 f4       	brcc	.+24     	; 0x2fc <check_sensors+0x42>
	  sensorbyte|=(1<<i);
 2e4:	97 01       	movw	r18, r14
 2e6:	0c 2e       	mov	r0, r28
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <check_sensors+0x34>
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <check_sensors+0x30>
 2f2:	80 91 60 00 	lds	r24, 0x0060
 2f6:	82 2b       	or	r24, r18
 2f8:	80 93 60 00 	sts	0x0060, r24
 2fc:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
 2fe:	c4 30       	cpi	r28, 0x04	; 4
 300:	d1 05       	cpc	r29, r1
 302:	39 f7       	brne	.-50     	; 0x2d2 <check_sensors+0x18>
	  temp[i]=adc_start(i);
	  if(temp[i]>threshold[i])
	  sensorbyte|=(1<<i);
	 
	 } 
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <calibrate_black>:
 
 //CALIBRATE FOR BLACK SURFACE
 void calibrate_black(void)
{
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	c5 e6       	ldi	r28, 0x65	; 101
 31a:	d0 e0       	ldi	r29, 0x00	; 0
 31c:	00 e0       	ldi	r16, 0x00	; 0
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
 31e:	80 2f       	mov	r24, r16
 320:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 324:	88 83       	st	Y, r24
 326:	10 e0       	ldi	r17, 0x00	; 0
		  
		  for(i=0;i<10;i++)
		 {
			  temp[i]=adc_start(j);
 328:	80 2f       	mov	r24, r16
 32a:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 32e:	98 2f       	mov	r25, r24
			  
			  if(temp[i]>max[j])
 330:	88 81       	ld	r24, Y
 332:	89 17       	cp	r24, r25
 334:	08 f4       	brcc	.+2      	; 0x338 <calibrate_black+0x28>
			  {
			  max[j]=temp[i];
 336:	98 83       	st	Y, r25

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
		  
		  for(i=0;i<10;i++)
 338:	1f 5f       	subi	r17, 0xFF	; 255
 33a:	1a 30       	cpi	r17, 0x0A	; 10
 33c:	a9 f7       	brne	.-22     	; 0x328 <calibrate_black+0x18>
 //CALIBRATE FOR BLACK SURFACE
 void calibrate_black(void)
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	04 30       	cpi	r16, 0x04	; 4
 344:	61 f7       	brne	.-40     	; 0x31e <calibrate_black+0xe>
		 }
	 
	}

		
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	08 95       	ret

00000350 <calibrate_white>:

//CALIBRATE FOR WHITE SURFACE
void calibrate_white(void)
{
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	c9 e6       	ldi	r28, 0x69	; 105
 35a:	d0 e0       	ldi	r29, 0x00	; 0
 35c:	00 e0       	ldi	r16, 0x00	; 0

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
 35e:	80 2f       	mov	r24, r16
 360:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 364:	88 83       	st	Y, r24
 366:	10 e0       	ldi	r17, 0x00	; 0
		  
		  for(i=0;i<10;i++)
		 {
			  temp[i]=adc_start(j);
 368:	80 2f       	mov	r24, r16
 36a:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 36e:	98 2f       	mov	r25, r24
			  
			 if(temp[i]<min[j])
 370:	88 81       	ld	r24, Y
 372:	98 17       	cp	r25, r24
 374:	08 f4       	brcc	.+2      	; 0x378 <calibrate_white+0x28>
			  {
			  min[j]=temp[i];
 376:	98 83       	st	Y, r25
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
		  
		  for(i=0;i<10;i++)
 378:	1f 5f       	subi	r17, 0xFF	; 255
 37a:	1a 30       	cpi	r17, 0x0A	; 10
 37c:	a9 f7       	brne	.-22     	; 0x368 <calibrate_white+0x18>
void calibrate_white(void)
{

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
 37e:	0f 5f       	subi	r16, 0xFF	; 255
 380:	21 96       	adiw	r28, 0x01	; 1
 382:	04 30       	cpi	r16, 0x04	; 4
 384:	61 f7       	brne	.-40     	; 0x35e <calibrate_white+0xe>
		 }
	 
	}

		
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
 39a:	1f ef       	ldi	r17, 0xFF	; 255
 39c:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
 39e:	84 e6       	ldi	r24, 0x64	; 100
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
		LED=0x00;
 3a6:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
 3a8:	84 e6       	ldi	r24, 0x64	; 100
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	c5 30       	cpi	r28, 0x05	; 5
 3b4:	d1 05       	cpc	r29, r1
 3b6:	91 f7       	brne	.-28     	; 0x39c <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	08 95       	ret

000003c0 <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
 3c0:	9b bd       	out	0x2b, r25	; 43
 3c2:	8a bd       	out	0x2a, r24	; 42
}
 3c4:	08 95       	ret

000003c6 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
 3c6:	99 bd       	out	0x29, r25	; 41
 3c8:	88 bd       	out	0x28, r24	; 40
}
 3ca:	08 95       	ret

000003cc <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
 3cc:	87 b3       	in	r24, 0x17	; 23
 3ce:	80 7f       	andi	r24, 0xF0	; 240
 3d0:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
 3d2:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
 3d4:	c5 98       	cbi	0x18, 5	; 24
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	8a 95       	dec	r24
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
 3dc:	22 e0       	ldi	r18, 0x02	; 2
 3de:	35 e0       	ldi	r19, 0x05	; 5
 3e0:	c7 9a       	sbi	0x18, 7	; 24
 3e2:	82 2f       	mov	r24, r18
 3e4:	8a 95       	dec	r24
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
 3e8:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 3ea:	82 95       	swap	r24
 3ec:	80 7f       	andi	r24, 0xF0	; 240
 3ee:	92 2f       	mov	r25, r18
 3f0:	9a 95       	dec	r25
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
 3f4:	c7 98       	cbi	0x18, 7	; 24
 3f6:	93 2f       	mov	r25, r19
 3f8:	9a 95       	dec	r25
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
 3fc:	c7 9a       	sbi	0x18, 7	; 24
 3fe:	92 2f       	mov	r25, r18
 400:	9a 95       	dec	r25
 402:	f1 f7       	brne	.-4      	; 0x400 <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
 404:	96 b3       	in	r25, 0x16	; 22
 406:	92 2f       	mov	r25, r18
 408:	9a 95       	dec	r25
 40a:	f1 f7       	brne	.-4      	; 0x408 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
 40c:	c7 98       	cbi	0x18, 7	; 24
 40e:	93 2f       	mov	r25, r19
 410:	9a 95       	dec	r25
 412:	f1 f7       	brne	.-4      	; 0x410 <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 414:	87 fd       	sbrc	r24, 7
 416:	e4 cf       	rjmp	.-56     	; 0x3e0 <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
 418:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 41a:	87 b3       	in	r24, 0x17	; 23
 41c:	8f 60       	ori	r24, 0x0F	; 15
 41e:	87 bb       	out	0x17, r24	; 23

}
 420:	08 95       	ret

00000422 <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
 422:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
 424:	66 23       	and	r22, r22
 426:	11 f4       	brne	.+4      	; 0x42c <lcd_byte+0xa>
	CLEAR_RS();
 428:	c5 98       	cbi	0x18, 5	; 24
 42a:	01 c0       	rjmp	.+2      	; 0x42e <lcd_byte+0xc>
else
	SET_RS();
 42c:	c5 9a       	sbi	0x18, 5	; 24
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
 434:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
 436:	88 b3       	in	r24, 0x18	; 24
 438:	92 2f       	mov	r25, r18
 43a:	92 95       	swap	r25
 43c:	9f 70       	andi	r25, 0x0F	; 15
 43e:	80 7f       	andi	r24, 0xF0	; 240
 440:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 442:	98 bb       	out	0x18, r25	; 24
 444:	95 e0       	ldi	r25, 0x05	; 5
 446:	89 2f       	mov	r24, r25
 448:	8a 95       	dec	r24
 44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
 44c:	c7 98       	cbi	0x18, 7	; 24
 44e:	89 2f       	mov	r24, r25
 450:	8a 95       	dec	r24
 452:	f1 f7       	brne	.-4      	; 0x450 <lcd_byte+0x2e>
_delay_us(1);
SET_E();
 454:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
 456:	88 b3       	in	r24, 0x18	; 24
 458:	2f 70       	andi	r18, 0x0F	; 15
 45a:	80 7f       	andi	r24, 0xF0	; 240
 45c:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
 45e:	88 bb       	out	0x18, r24	; 24
 460:	89 2f       	mov	r24, r25
 462:	8a 95       	dec	r24
 464:	f1 f7       	brne	.-4      	; 0x462 <__stack+0x3>
_delay_us(1);			//tEH
CLEAR_E();
 466:	c7 98       	cbi	0x18, 7	; 24
 468:	9a 95       	dec	r25
 46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
_delay_us(1);			//tEL
lcd_busy_loop();
 46c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_busy_loop>
}
 470:	08 95       	ret

00000472 <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
 472:	1f 93       	push	r17
 474:	18 2f       	mov	r17, r24
 476:	8c e2       	ldi	r24, 0x2C	; 44
 478:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 47a:	20 e9       	ldi	r18, 0x90	; 144
 47c:	31 e0       	ldi	r19, 0x01	; 1
 47e:	f9 01       	movw	r30, r18
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 484:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 486:	d9 f7       	brne	.-10     	; 0x47e <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 488:	87 b3       	in	r24, 0x17	; 23
 48a:	8f 60       	ori	r24, 0x0F	; 15
 48c:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 48e:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 490:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 492:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
 494:	88 b3       	in	r24, 0x18	; 24
 496:	80 7f       	andi	r24, 0xF0	; 240
 498:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 49a:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
 49c:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
 49e:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	8a 95       	dec	r24
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
 4a6:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
 4a8:	c1 9a       	sbi	0x18, 1	; 24
 4aa:	85 e0       	ldi	r24, 0x05	; 5
 4ac:	98 2f       	mov	r25, r24
 4ae:	9a 95       	dec	r25
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
 4b2:	c7 98       	cbi	0x18, 7	; 24
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
 4b8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
 4bc:	81 2f       	mov	r24, r17
 4be:	8c 60       	ori	r24, 0x0C	; 12
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
 4c6:	88 e2       	ldi	r24, 0x28	; 40
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
}
 4ce:	1f 91       	pop	r17
 4d0:	08 95       	ret

000004d2 <lcd_write_string>:
void lcd_write_string(const char *msg)
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	ec 01       	movw	r28, r24
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
	msg++;
 4e0:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
 4e2:	88 81       	ld	r24, Y
 4e4:	88 23       	and	r24, r24
 4e6:	c9 f7       	brne	.-14     	; 0x4da <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <lcd_write_int+0xe>
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <lcd_write_int+0x10>
 4fe:	0f 92       	push	r0
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	9c 01       	movw	r18, r24
 506:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
 508:	fe 01       	movw	r30, r28
 50a:	31 96       	adiw	r30, 0x01	; 1
 50c:	85 e0       	ldi	r24, 0x05	; 5
 50e:	df 01       	movw	r26, r30
 510:	1d 92       	st	X+, r1
 512:	8a 95       	dec	r24
 514:	e9 f7       	brne	.-6      	; 0x510 <lcd_write_int+0x22>
 516:	fe 01       	movw	r30, r28
 518:	35 96       	adiw	r30, 0x05	; 5
 51a:	0d c0       	rjmp	.+26     	; 0x536 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 51c:	c9 01       	movw	r24, r18
 51e:	6a e0       	ldi	r22, 0x0A	; 10
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodhi4>
 526:	80 83       	st	Z, r24
	val=val/10;
 528:	c9 01       	movw	r24, r18
 52a:	6a e0       	ldi	r22, 0x0A	; 10
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodhi4>
 532:	9b 01       	movw	r18, r22
 534:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 536:	21 15       	cp	r18, r1
 538:	31 05       	cpc	r19, r1
 53a:	81 f7       	brne	.-32     	; 0x51c <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 53c:	bf ef       	ldi	r27, 0xFF	; 255
 53e:	0f 3f       	cpi	r16, 0xFF	; 255
 540:	1b 07       	cpc	r17, r27
 542:	79 f4       	brne	.+30     	; 0x562 <lcd_write_int+0x74>
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 548:	ae 01       	movw	r20, r28
 54a:	4f 5f       	subi	r20, 0xFF	; 255
 54c:	5f 4f       	sbci	r21, 0xFF	; 255
 54e:	02 c0       	rjmp	.+4      	; 0x554 <lcd_write_int+0x66>
 550:	2f 5f       	subi	r18, 0xFF	; 255
 552:	3f 4f       	sbci	r19, 0xFF	; 255
 554:	fa 01       	movw	r30, r20
 556:	e2 0f       	add	r30, r18
 558:	f3 1f       	adc	r31, r19
 55a:	80 81       	ld	r24, Z
 55c:	88 23       	and	r24, r24
 55e:	c1 f3       	breq	.-16     	; 0x550 <lcd_write_int+0x62>
 560:	04 c0       	rjmp	.+8      	; 0x56a <lcd_write_int+0x7c>
	else
		j=5-field_length;
 562:	25 e0       	ldi	r18, 0x05	; 5
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	20 1b       	sub	r18, r16
 568:	31 0b       	sbc	r19, r17
 56a:	7e 01       	movw	r14, r28
 56c:	08 94       	sec
 56e:	e1 1c       	adc	r14, r1
 570:	f1 1c       	adc	r15, r1
 572:	e2 0e       	add	r14, r18
 574:	f3 1e       	adc	r15, r19
 576:	89 01       	movw	r16, r18
 578:	09 c0       	rjmp	.+18     	; 0x58c <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
 57a:	f7 01       	movw	r30, r14
 57c:	81 91       	ld	r24, Z+
 57e:	7f 01       	movw	r14, r30
 580:	80 5d       	subi	r24, 0xD0	; 208
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
 588:	0f 5f       	subi	r16, 0xFF	; 255
 58a:	1f 4f       	sbci	r17, 0xFF	; 255
 58c:	05 30       	cpi	r16, 0x05	; 5
 58e:	11 05       	cpc	r17, r1
 590:	a4 f3       	brlt	.-24     	; 0x57a <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	cf 91       	pop	r28
 59e:	df 91       	pop	r29
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	08 95       	ret

000005aa <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
 5aa:	88 32       	cpi	r24, 0x28	; 40
 5ac:	30 f4       	brcc	.+12     	; 0x5ba <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
 5ae:	61 11       	cpse	r22, r1
 5b0:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
 5b2:	80 68       	ori	r24, 0x80	; 128
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	0e 94 11 02 	call	0x422	; 0x422 <lcd_byte>
 5ba:	08 95       	ret

000005bc <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
 5c2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lcd_goto_xy>
 lcd_write_string(msg);
 5c6:	c8 01       	movw	r24, r16
 5c8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_write_string>
}
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	08 95       	ret

000005d2 <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
 5d2:	ef 92       	push	r14
 5d4:	ff 92       	push	r15
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	8a 01       	movw	r16, r20
 5dc:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
 5de:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lcd_goto_xy>
 lcd_write_int(val,fl);
 5e2:	c8 01       	movw	r24, r16
 5e4:	b7 01       	movw	r22, r14
 5e6:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_write_int>
}
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	08 95       	ret

000005f4 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
 5f4:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
 5f6:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
 5f8:	87 e0       	ldi	r24, 0x07	; 7
 5fa:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
 5fc:	87 e6       	ldi	r24, 0x67	; 103
 5fe:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
 600:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
 602:	88 e9       	ldi	r24, 0x98	; 152
 604:	8a b9       	out	0x0a, r24	; 10
}
 606:	08 95       	ret

00000608 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 608:	5d 9b       	sbis	0x0b, 5	; 11
 60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
 60c:	8c b9       	out	0x0c, r24	; 12
}
 60e:	08 95       	ret

00000610 <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
 610:	fc 01       	movw	r30, r24
 612:	04 c0       	rjmp	.+8      	; 0x61c <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 614:	5d 9b       	sbis	0x0b, 5	; 11
 616:	fe cf       	rjmp	.-4      	; 0x614 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
 618:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
 61a:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 61c:	80 81       	ld	r24, Z
 61e:	88 23       	and	r24, r24
 620:	c9 f7       	brne	.-14     	; 0x614 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
 622:	08 95       	ret

00000624 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 624:	5d 9b       	sbis	0x0b, 5	; 11
 626:	fe cf       	rjmp	.-4      	; 0x624 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
 628:	8a e0       	ldi	r24, 0x0A	; 10
 62a:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 62c:	5d 9b       	sbis	0x0b, 5	; 11
 62e:	fe cf       	rjmp	.-4      	; 0x62c <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
 630:	8d e0       	ldi	r24, 0x0D	; 13
 632:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
 634:	08 95       	ret

00000636 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
 636:	5f 9b       	sbis	0x0b, 7	; 11
 638:	fe cf       	rjmp	.-4      	; 0x636 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
 63a:	8c b1       	in	r24, 0x0c	; 12
}
 63c:	08 95       	ret

0000063e <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	84 bb       	out	0x14, r24	; 20
}
 642:	08 95       	ret

00000644 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
 644:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 646:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 648:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 64a:	af 98       	cbi	0x15, 7	; 21
}
 64c:	08 95       	ret

0000064e <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
 64e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 650:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 652:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 654:	af 98       	cbi	0x15, 7	; 21
}
 656:	08 95       	ret

00000658 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
 658:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 65a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 65c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 65e:	af 98       	cbi	0x15, 7	; 21
}
 660:	08 95       	ret

00000662 <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
 662:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 664:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 666:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 668:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
 66a:	08 95       	ret

0000066c <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
 66c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 66e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 670:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 672:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
 674:	08 95       	ret

00000676 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
 676:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 678:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 67a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
 67c:	af 9a       	sbi	0x15, 7	; 21
}
 67e:	08 95       	ret

00000680 <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
 680:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 682:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 684:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 686:	af 98       	cbi	0x15, 7	; 21
}
 688:	08 95       	ret

0000068a <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
 68a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 68c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 68e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 690:	af 9a       	sbi	0x15, 7	; 21
}
 692:	08 95       	ret

00000694 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
 694:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 696:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 698:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 69a:	af 98       	cbi	0x15, 7	; 21
}
 69c:	08 95       	ret

0000069e <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
 69e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 6a0:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 6a2:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 6a4:	af 9a       	sbi	0x15, 7	; 21
}
 6a6:	08 95       	ret

000006a8 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
 6a8:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 6aa:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 6ac:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 6ae:	af 98       	cbi	0x15, 7	; 21
}
 6b0:	08 95       	ret

000006b2 <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
 6b2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
 6b4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 6b6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
 6b8:	af 9a       	sbi	0x15, 7	; 21
}
 6ba:	08 95       	ret

000006bc <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
 6bc:	82 b3       	in	r24, 0x12	; 18
 6be:	8f 60       	ori	r24, 0x0F	; 15
 6c0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
 6c2:	81 b3       	in	r24, 0x11	; 17
 6c4:	80 7f       	andi	r24, 0xF0	; 240
 6c6:	81 bb       	out	0x11, r24	; 17
}
 6c8:	08 95       	ret

000006ca <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
 6ca:	20 b3       	in	r18, 0x10	; 16
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	20 95       	com	r18
 6d0:	30 95       	com	r19
 6d2:	21 70       	andi	r18, 0x01	; 1
 6d4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6d6:	c9 01       	movw	r24, r18
 6d8:	08 95       	ret

000006da <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
 6da:	20 b3       	in	r18, 0x10	; 16
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	36 95       	lsr	r19
 6e0:	27 95       	ror	r18
 6e2:	20 95       	com	r18
 6e4:	30 95       	com	r19
 6e6:	21 70       	andi	r18, 0x01	; 1
 6e8:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6ea:	c9 01       	movw	r24, r18
 6ec:	08 95       	ret

000006ee <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
 6ee:	20 b3       	in	r18, 0x10	; 16
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	36 95       	lsr	r19
 6f4:	27 95       	ror	r18
 6f6:	36 95       	lsr	r19
 6f8:	27 95       	ror	r18
 6fa:	20 95       	com	r18
 6fc:	30 95       	com	r19
 6fe:	21 70       	andi	r18, 0x01	; 1
 700:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 702:	c9 01       	movw	r24, r18
 704:	08 95       	ret

00000706 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
 706:	20 b3       	in	r18, 0x10	; 16
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	53 e0       	ldi	r21, 0x03	; 3
 70c:	36 95       	lsr	r19
 70e:	27 95       	ror	r18
 710:	5a 95       	dec	r21
 712:	e1 f7       	brne	.-8      	; 0x70c <pressed_switch3+0x6>
 714:	20 95       	com	r18
 716:	30 95       	com	r19
 718:	21 70       	andi	r18, 0x01	; 1
 71a:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 71c:	c9 01       	movw	r24, r18
 71e:	08 95       	ret

00000720 <blink_pattern1>:
#include "sra.c"

# define F_CPU 16000000UL 

void blink_pattern1()
{
 720:	1f 93       	push	r17
LED=0b0000000;
 722:	15 ba       	out	0x15, r1	; 21
delay_millisec(100);
 724:	84 e6       	ldi	r24, 0x64	; 100
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b10000000;
 72c:	80 e8       	ldi	r24, 0x80	; 128
 72e:	85 bb       	out	0x15, r24	; 21
delay_millisec(100);
 730:	84 e6       	ldi	r24, 0x64	; 100
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b11000000;
 738:	80 ec       	ldi	r24, 0xC0	; 192
 73a:	85 bb       	out	0x15, r24	; 21
delay_millisec(100);
 73c:	84 e6       	ldi	r24, 0x64	; 100
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b11100000;
 744:	10 ee       	ldi	r17, 0xE0	; 224
 746:	15 bb       	out	0x15, r17	; 21
delay_millisec(100);
 748:	84 e6       	ldi	r24, 0x64	; 100
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b11100000;
 750:	15 bb       	out	0x15, r17	; 21
delay_millisec(100);
 752:	84 e6       	ldi	r24, 0x64	; 100
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b11110000;
 75a:	80 ef       	ldi	r24, 0xF0	; 240
 75c:	85 bb       	out	0x15, r24	; 21
delay_millisec(100);
 75e:	84 e6       	ldi	r24, 0x64	; 100
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b11111000;
 766:	88 ef       	ldi	r24, 0xF8	; 248
 768:	85 bb       	out	0x15, r24	; 21
delay_millisec(100);
 76a:	84 e6       	ldi	r24, 0x64	; 100
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b11111100;
 772:	8c ef       	ldi	r24, 0xFC	; 252
 774:	85 bb       	out	0x15, r24	; 21
delay_millisec(100);
 776:	84 e6       	ldi	r24, 0x64	; 100
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b11111110;
 77e:	8e ef       	ldi	r24, 0xFE	; 254
 780:	85 bb       	out	0x15, r24	; 21
delay_millisec(100);
 782:	84 e6       	ldi	r24, 0x64	; 100
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
LED=0b11111111;
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	85 bb       	out	0x15, r24	; 21
delay_millisec(100);
 78e:	84 e6       	ldi	r24, 0x64	; 100
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
}
 796:	1f 91       	pop	r17
 798:	08 95       	ret

0000079a <main>:

void main()
{

LED_DIR=0xFF;
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	84 bb       	out	0x14, r24	; 20
LED=0x00;
 79e:	15 ba       	out	0x15, r1	; 21
while(1)
{
flick();
 7a0:	0e 94 c8 01 	call	0x390	; 0x390 <flick>
blink_pattern1();
 7a4:	0e 94 90 03 	call	0x720	; 0x720 <blink_pattern1>
 7a8:	fb cf       	rjmp	.-10     	; 0x7a0 <main+0x6>

000007aa <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold[i]=eeprom_read_byte(eeprom_addr);
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 f7 05 	call	0xbee	; 0xbee <__eerd_byte_m16>
 7b2:	80 93 61 00 	sts	0x0061, r24
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 f7 05 	call	0xbee	; 0xbee <__eerd_byte_m16>
 7be:	80 93 62 00 	sts	0x0062, r24
 7c2:	82 e0       	ldi	r24, 0x02	; 2
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 f7 05 	call	0xbee	; 0xbee <__eerd_byte_m16>
 7ca:	80 93 63 00 	sts	0x0063, r24
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 f7 05 	call	0xbee	; 0xbee <__eerd_byte_m16>
 7d6:	80 93 64 00 	sts	0x0064, r24
		eeprom_addr++;
	}
}
 7da:	08 95       	ret

000007dc <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	50 e0       	ldi	r21, 0x00	; 0
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 diff=abs(max[i]-min[i]);	
 7e4:	fa 01       	movw	r30, r20
 7e6:	eb 59       	subi	r30, 0x9B	; 155
 7e8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ea:	90 81       	ld	r25, Z
		 threshold[i]=max[i]+(diff>>1);
 7ec:	da 01       	movw	r26, r20
 7ee:	af 59       	subi	r26, 0x9F	; 159
 7f0:	bf 4f       	sbci	r27, 0xFF	; 255
 7f2:	29 2f       	mov	r18, r25
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	fa 01       	movw	r30, r20
 7f8:	e7 59       	subi	r30, 0x97	; 151
 7fa:	ff 4f       	sbci	r31, 0xFF	; 255
 7fc:	80 81       	ld	r24, Z
 7fe:	28 1b       	sub	r18, r24
 800:	31 09       	sbc	r19, r1
 802:	37 ff       	sbrs	r19, 7
 804:	03 c0       	rjmp	.+6      	; 0x80c <set_threshold+0x30>
 806:	30 95       	com	r19
 808:	21 95       	neg	r18
 80a:	3f 4f       	sbci	r19, 0xFF	; 255
 80c:	82 2f       	mov	r24, r18
 80e:	86 95       	lsr	r24
 810:	89 0f       	add	r24, r25
 812:	8c 93       	st	X, r24
 814:	4f 5f       	subi	r20, 0xFF	; 255
 816:	5f 4f       	sbci	r21, 0xFF	; 255

	unsigned char i,eeprom_addr=0x0000;
	char diff;
	
	
	 for(i=0;i<sensor_num;i++)
 818:	44 30       	cpi	r20, 0x04	; 4
 81a:	51 05       	cpc	r21, r1
 81c:	19 f7       	brne	.-58     	; 0x7e4 <set_threshold+0x8>
 81e:	c0 e0       	ldi	r28, 0x00	; 0
 820:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold[i]);
 822:	fe 01       	movw	r30, r28
 824:	ef 59       	subi	r30, 0x9F	; 159
 826:	ff 4f       	sbci	r31, 0xFF	; 255
 828:	ce 01       	movw	r24, r28
 82a:	60 81       	ld	r22, Z
 82c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__eewr_byte_m16>
		 diff=abs(max[i]-min[i]);	
		 threshold[i]=max[i]+(diff>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
 830:	21 96       	adiw	r28, 0x01	; 1
 832:	c4 30       	cpi	r28, 0x04	; 4
 834:	d1 05       	cpc	r29, r1
 836:	a9 f7       	brne	.-22     	; 0x822 <set_threshold+0x46>
	{
		eeprom_write_byte(eeprom_addr,threshold[i]);
		eeprom_addr++;
	}
	 
}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <__cmpsf2>:
 83e:	d4 d0       	rcall	.+424    	; 0x9e8 <__fp_cmp>
 840:	08 f4       	brcc	.+2      	; 0x844 <__cmpsf2+0x6>
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	08 95       	ret

00000846 <__divsf3>:
 846:	0c d0       	rcall	.+24     	; 0x860 <__divsf3x>
 848:	0a c1       	rjmp	.+532    	; 0xa5e <__fp_round>
 84a:	02 d1       	rcall	.+516    	; 0xa50 <__fp_pscB>
 84c:	40 f0       	brcs	.+16     	; 0x85e <__divsf3+0x18>
 84e:	f9 d0       	rcall	.+498    	; 0xa42 <__fp_pscA>
 850:	30 f0       	brcs	.+12     	; 0x85e <__divsf3+0x18>
 852:	21 f4       	brne	.+8      	; 0x85c <__divsf3+0x16>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	19 f0       	breq	.+6      	; 0x85e <__divsf3+0x18>
 858:	eb c0       	rjmp	.+470    	; 0xa30 <__fp_inf>
 85a:	51 11       	cpse	r21, r1
 85c:	34 c1       	rjmp	.+616    	; 0xac6 <__fp_szero>
 85e:	ee c0       	rjmp	.+476    	; 0xa3c <__fp_nan>

00000860 <__divsf3x>:
 860:	0f d1       	rcall	.+542    	; 0xa80 <__fp_split3>
 862:	98 f3       	brcs	.-26     	; 0x84a <__divsf3+0x4>

00000864 <__divsf3_pse>:
 864:	99 23       	and	r25, r25
 866:	c9 f3       	breq	.-14     	; 0x85a <__divsf3+0x14>
 868:	55 23       	and	r21, r21
 86a:	b1 f3       	breq	.-20     	; 0x858 <__divsf3+0x12>
 86c:	95 1b       	sub	r25, r21
 86e:	55 0b       	sbc	r21, r21
 870:	bb 27       	eor	r27, r27
 872:	aa 27       	eor	r26, r26
 874:	62 17       	cp	r22, r18
 876:	73 07       	cpc	r23, r19
 878:	84 07       	cpc	r24, r20
 87a:	38 f0       	brcs	.+14     	; 0x88a <__divsf3_pse+0x26>
 87c:	9f 5f       	subi	r25, 0xFF	; 255
 87e:	5f 4f       	sbci	r21, 0xFF	; 255
 880:	22 0f       	add	r18, r18
 882:	33 1f       	adc	r19, r19
 884:	44 1f       	adc	r20, r20
 886:	aa 1f       	adc	r26, r26
 888:	a9 f3       	breq	.-22     	; 0x874 <__divsf3_pse+0x10>
 88a:	33 d0       	rcall	.+102    	; 0x8f2 <__divsf3_pse+0x8e>
 88c:	0e 2e       	mov	r0, r30
 88e:	3a f0       	brmi	.+14     	; 0x89e <__divsf3_pse+0x3a>
 890:	e0 e8       	ldi	r30, 0x80	; 128
 892:	30 d0       	rcall	.+96     	; 0x8f4 <__divsf3_pse+0x90>
 894:	91 50       	subi	r25, 0x01	; 1
 896:	50 40       	sbci	r21, 0x00	; 0
 898:	e6 95       	lsr	r30
 89a:	00 1c       	adc	r0, r0
 89c:	ca f7       	brpl	.-14     	; 0x890 <__divsf3_pse+0x2c>
 89e:	29 d0       	rcall	.+82     	; 0x8f2 <__divsf3_pse+0x8e>
 8a0:	fe 2f       	mov	r31, r30
 8a2:	27 d0       	rcall	.+78     	; 0x8f2 <__divsf3_pse+0x8e>
 8a4:	66 0f       	add	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	bb 1f       	adc	r27, r27
 8ac:	26 17       	cp	r18, r22
 8ae:	37 07       	cpc	r19, r23
 8b0:	48 07       	cpc	r20, r24
 8b2:	ab 07       	cpc	r26, r27
 8b4:	b0 e8       	ldi	r27, 0x80	; 128
 8b6:	09 f0       	breq	.+2      	; 0x8ba <__divsf3_pse+0x56>
 8b8:	bb 0b       	sbc	r27, r27
 8ba:	80 2d       	mov	r24, r0
 8bc:	bf 01       	movw	r22, r30
 8be:	ff 27       	eor	r31, r31
 8c0:	93 58       	subi	r25, 0x83	; 131
 8c2:	5f 4f       	sbci	r21, 0xFF	; 255
 8c4:	2a f0       	brmi	.+10     	; 0x8d0 <__divsf3_pse+0x6c>
 8c6:	9e 3f       	cpi	r25, 0xFE	; 254
 8c8:	51 05       	cpc	r21, r1
 8ca:	68 f0       	brcs	.+26     	; 0x8e6 <__divsf3_pse+0x82>
 8cc:	b1 c0       	rjmp	.+354    	; 0xa30 <__fp_inf>
 8ce:	fb c0       	rjmp	.+502    	; 0xac6 <__fp_szero>
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	ec f3       	brlt	.-6      	; 0x8ce <__divsf3_pse+0x6a>
 8d4:	98 3e       	cpi	r25, 0xE8	; 232
 8d6:	dc f3       	brlt	.-10     	; 0x8ce <__divsf3_pse+0x6a>
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b7 95       	ror	r27
 8e0:	f7 95       	ror	r31
 8e2:	9f 5f       	subi	r25, 0xFF	; 255
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__divsf3_pse+0x74>
 8e6:	88 0f       	add	r24, r24
 8e8:	91 1d       	adc	r25, r1
 8ea:	96 95       	lsr	r25
 8ec:	87 95       	ror	r24
 8ee:	97 f9       	bld	r25, 7
 8f0:	08 95       	ret
 8f2:	e1 e0       	ldi	r30, 0x01	; 1
 8f4:	66 0f       	add	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	88 1f       	adc	r24, r24
 8fa:	bb 1f       	adc	r27, r27
 8fc:	62 17       	cp	r22, r18
 8fe:	73 07       	cpc	r23, r19
 900:	84 07       	cpc	r24, r20
 902:	ba 07       	cpc	r27, r26
 904:	20 f0       	brcs	.+8      	; 0x90e <__divsf3_pse+0xaa>
 906:	62 1b       	sub	r22, r18
 908:	73 0b       	sbc	r23, r19
 90a:	84 0b       	sbc	r24, r20
 90c:	ba 0b       	sbc	r27, r26
 90e:	ee 1f       	adc	r30, r30
 910:	88 f7       	brcc	.-30     	; 0x8f4 <__divsf3_pse+0x90>
 912:	e0 95       	com	r30
 914:	08 95       	ret

00000916 <__fixunssfsi>:
 916:	bc d0       	rcall	.+376    	; 0xa90 <__fp_splitA>
 918:	88 f0       	brcs	.+34     	; 0x93c <__fixunssfsi+0x26>
 91a:	9f 57       	subi	r25, 0x7F	; 127
 91c:	90 f0       	brcs	.+36     	; 0x942 <__fixunssfsi+0x2c>
 91e:	b9 2f       	mov	r27, r25
 920:	99 27       	eor	r25, r25
 922:	b7 51       	subi	r27, 0x17	; 23
 924:	a0 f0       	brcs	.+40     	; 0x94e <__fixunssfsi+0x38>
 926:	d1 f0       	breq	.+52     	; 0x95c <__fixunssfsi+0x46>
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	1a f0       	brmi	.+6      	; 0x938 <__fixunssfsi+0x22>
 932:	ba 95       	dec	r27
 934:	c9 f7       	brne	.-14     	; 0x928 <__fixunssfsi+0x12>
 936:	12 c0       	rjmp	.+36     	; 0x95c <__fixunssfsi+0x46>
 938:	b1 30       	cpi	r27, 0x01	; 1
 93a:	81 f0       	breq	.+32     	; 0x95c <__fixunssfsi+0x46>
 93c:	c3 d0       	rcall	.+390    	; 0xac4 <__fp_zero>
 93e:	b1 e0       	ldi	r27, 0x01	; 1
 940:	08 95       	ret
 942:	c0 c0       	rjmp	.+384    	; 0xac4 <__fp_zero>
 944:	67 2f       	mov	r22, r23
 946:	78 2f       	mov	r23, r24
 948:	88 27       	eor	r24, r24
 94a:	b8 5f       	subi	r27, 0xF8	; 248
 94c:	39 f0       	breq	.+14     	; 0x95c <__fixunssfsi+0x46>
 94e:	b9 3f       	cpi	r27, 0xF9	; 249
 950:	cc f3       	brlt	.-14     	; 0x944 <__fixunssfsi+0x2e>
 952:	86 95       	lsr	r24
 954:	77 95       	ror	r23
 956:	67 95       	ror	r22
 958:	b3 95       	inc	r27
 95a:	d9 f7       	brne	.-10     	; 0x952 <__fixunssfsi+0x3c>
 95c:	3e f4       	brtc	.+14     	; 0x96c <__fixunssfsi+0x56>
 95e:	90 95       	com	r25
 960:	80 95       	com	r24
 962:	70 95       	com	r23
 964:	61 95       	neg	r22
 966:	7f 4f       	sbci	r23, 0xFF	; 255
 968:	8f 4f       	sbci	r24, 0xFF	; 255
 96a:	9f 4f       	sbci	r25, 0xFF	; 255
 96c:	08 95       	ret

0000096e <__floatunsisf>:
 96e:	e8 94       	clt
 970:	09 c0       	rjmp	.+18     	; 0x984 <__floatsisf+0x12>

00000972 <__floatsisf>:
 972:	97 fb       	bst	r25, 7
 974:	3e f4       	brtc	.+14     	; 0x984 <__floatsisf+0x12>
 976:	90 95       	com	r25
 978:	80 95       	com	r24
 97a:	70 95       	com	r23
 97c:	61 95       	neg	r22
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	8f 4f       	sbci	r24, 0xFF	; 255
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	99 23       	and	r25, r25
 986:	a9 f0       	breq	.+42     	; 0x9b2 <__floatsisf+0x40>
 988:	f9 2f       	mov	r31, r25
 98a:	96 e9       	ldi	r25, 0x96	; 150
 98c:	bb 27       	eor	r27, r27
 98e:	93 95       	inc	r25
 990:	f6 95       	lsr	r31
 992:	87 95       	ror	r24
 994:	77 95       	ror	r23
 996:	67 95       	ror	r22
 998:	b7 95       	ror	r27
 99a:	f1 11       	cpse	r31, r1
 99c:	f8 cf       	rjmp	.-16     	; 0x98e <__floatsisf+0x1c>
 99e:	fa f4       	brpl	.+62     	; 0x9de <__floatsisf+0x6c>
 9a0:	bb 0f       	add	r27, r27
 9a2:	11 f4       	brne	.+4      	; 0x9a8 <__floatsisf+0x36>
 9a4:	60 ff       	sbrs	r22, 0
 9a6:	1b c0       	rjmp	.+54     	; 0x9de <__floatsisf+0x6c>
 9a8:	6f 5f       	subi	r22, 0xFF	; 255
 9aa:	7f 4f       	sbci	r23, 0xFF	; 255
 9ac:	8f 4f       	sbci	r24, 0xFF	; 255
 9ae:	9f 4f       	sbci	r25, 0xFF	; 255
 9b0:	16 c0       	rjmp	.+44     	; 0x9de <__floatsisf+0x6c>
 9b2:	88 23       	and	r24, r24
 9b4:	11 f0       	breq	.+4      	; 0x9ba <__floatsisf+0x48>
 9b6:	96 e9       	ldi	r25, 0x96	; 150
 9b8:	11 c0       	rjmp	.+34     	; 0x9dc <__floatsisf+0x6a>
 9ba:	77 23       	and	r23, r23
 9bc:	21 f0       	breq	.+8      	; 0x9c6 <__floatsisf+0x54>
 9be:	9e e8       	ldi	r25, 0x8E	; 142
 9c0:	87 2f       	mov	r24, r23
 9c2:	76 2f       	mov	r23, r22
 9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <__floatsisf+0x5e>
 9c6:	66 23       	and	r22, r22
 9c8:	71 f0       	breq	.+28     	; 0x9e6 <__floatsisf+0x74>
 9ca:	96 e8       	ldi	r25, 0x86	; 134
 9cc:	86 2f       	mov	r24, r22
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	60 e0       	ldi	r22, 0x00	; 0
 9d2:	2a f0       	brmi	.+10     	; 0x9de <__floatsisf+0x6c>
 9d4:	9a 95       	dec	r25
 9d6:	66 0f       	add	r22, r22
 9d8:	77 1f       	adc	r23, r23
 9da:	88 1f       	adc	r24, r24
 9dc:	da f7       	brpl	.-10     	; 0x9d4 <__floatsisf+0x62>
 9de:	88 0f       	add	r24, r24
 9e0:	96 95       	lsr	r25
 9e2:	87 95       	ror	r24
 9e4:	97 f9       	bld	r25, 7
 9e6:	08 95       	ret

000009e8 <__fp_cmp>:
 9e8:	99 0f       	add	r25, r25
 9ea:	00 08       	sbc	r0, r0
 9ec:	55 0f       	add	r21, r21
 9ee:	aa 0b       	sbc	r26, r26
 9f0:	e0 e8       	ldi	r30, 0x80	; 128
 9f2:	fe ef       	ldi	r31, 0xFE	; 254
 9f4:	16 16       	cp	r1, r22
 9f6:	17 06       	cpc	r1, r23
 9f8:	e8 07       	cpc	r30, r24
 9fa:	f9 07       	cpc	r31, r25
 9fc:	c0 f0       	brcs	.+48     	; 0xa2e <__fp_cmp+0x46>
 9fe:	12 16       	cp	r1, r18
 a00:	13 06       	cpc	r1, r19
 a02:	e4 07       	cpc	r30, r20
 a04:	f5 07       	cpc	r31, r21
 a06:	98 f0       	brcs	.+38     	; 0xa2e <__fp_cmp+0x46>
 a08:	62 1b       	sub	r22, r18
 a0a:	73 0b       	sbc	r23, r19
 a0c:	84 0b       	sbc	r24, r20
 a0e:	95 0b       	sbc	r25, r21
 a10:	39 f4       	brne	.+14     	; 0xa20 <__fp_cmp+0x38>
 a12:	0a 26       	eor	r0, r26
 a14:	61 f0       	breq	.+24     	; 0xa2e <__fp_cmp+0x46>
 a16:	23 2b       	or	r18, r19
 a18:	24 2b       	or	r18, r20
 a1a:	25 2b       	or	r18, r21
 a1c:	21 f4       	brne	.+8      	; 0xa26 <__fp_cmp+0x3e>
 a1e:	08 95       	ret
 a20:	0a 26       	eor	r0, r26
 a22:	09 f4       	brne	.+2      	; 0xa26 <__fp_cmp+0x3e>
 a24:	a1 40       	sbci	r26, 0x01	; 1
 a26:	a6 95       	lsr	r26
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	81 1d       	adc	r24, r1
 a2c:	81 1d       	adc	r24, r1
 a2e:	08 95       	ret

00000a30 <__fp_inf>:
 a30:	97 f9       	bld	r25, 7
 a32:	9f 67       	ori	r25, 0x7F	; 127
 a34:	80 e8       	ldi	r24, 0x80	; 128
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	60 e0       	ldi	r22, 0x00	; 0
 a3a:	08 95       	ret

00000a3c <__fp_nan>:
 a3c:	9f ef       	ldi	r25, 0xFF	; 255
 a3e:	80 ec       	ldi	r24, 0xC0	; 192
 a40:	08 95       	ret

00000a42 <__fp_pscA>:
 a42:	00 24       	eor	r0, r0
 a44:	0a 94       	dec	r0
 a46:	16 16       	cp	r1, r22
 a48:	17 06       	cpc	r1, r23
 a4a:	18 06       	cpc	r1, r24
 a4c:	09 06       	cpc	r0, r25
 a4e:	08 95       	ret

00000a50 <__fp_pscB>:
 a50:	00 24       	eor	r0, r0
 a52:	0a 94       	dec	r0
 a54:	12 16       	cp	r1, r18
 a56:	13 06       	cpc	r1, r19
 a58:	14 06       	cpc	r1, r20
 a5a:	05 06       	cpc	r0, r21
 a5c:	08 95       	ret

00000a5e <__fp_round>:
 a5e:	09 2e       	mov	r0, r25
 a60:	03 94       	inc	r0
 a62:	00 0c       	add	r0, r0
 a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0xc>
 a66:	88 23       	and	r24, r24
 a68:	52 f0       	brmi	.+20     	; 0xa7e <__fp_round+0x20>
 a6a:	bb 0f       	add	r27, r27
 a6c:	40 f4       	brcc	.+16     	; 0xa7e <__fp_round+0x20>
 a6e:	bf 2b       	or	r27, r31
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0x18>
 a72:	60 ff       	sbrs	r22, 0
 a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fp_round+0x20>
 a76:	6f 5f       	subi	r22, 0xFF	; 255
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__fp_split3>:
 a80:	57 fd       	sbrc	r21, 7
 a82:	90 58       	subi	r25, 0x80	; 128
 a84:	44 0f       	add	r20, r20
 a86:	55 1f       	adc	r21, r21
 a88:	59 f0       	breq	.+22     	; 0xaa0 <__fp_splitA+0x10>
 a8a:	5f 3f       	cpi	r21, 0xFF	; 255
 a8c:	71 f0       	breq	.+28     	; 0xaaa <__fp_splitA+0x1a>
 a8e:	47 95       	ror	r20

00000a90 <__fp_splitA>:
 a90:	88 0f       	add	r24, r24
 a92:	97 fb       	bst	r25, 7
 a94:	99 1f       	adc	r25, r25
 a96:	61 f0       	breq	.+24     	; 0xab0 <__fp_splitA+0x20>
 a98:	9f 3f       	cpi	r25, 0xFF	; 255
 a9a:	79 f0       	breq	.+30     	; 0xaba <__fp_splitA+0x2a>
 a9c:	87 95       	ror	r24
 a9e:	08 95       	ret
 aa0:	12 16       	cp	r1, r18
 aa2:	13 06       	cpc	r1, r19
 aa4:	14 06       	cpc	r1, r20
 aa6:	55 1f       	adc	r21, r21
 aa8:	f2 cf       	rjmp	.-28     	; 0xa8e <__fp_split3+0xe>
 aaa:	46 95       	lsr	r20
 aac:	f1 df       	rcall	.-30     	; 0xa90 <__fp_splitA>
 aae:	08 c0       	rjmp	.+16     	; 0xac0 <__fp_splitA+0x30>
 ab0:	16 16       	cp	r1, r22
 ab2:	17 06       	cpc	r1, r23
 ab4:	18 06       	cpc	r1, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	f1 cf       	rjmp	.-30     	; 0xa9c <__fp_splitA+0xc>
 aba:	86 95       	lsr	r24
 abc:	71 05       	cpc	r23, r1
 abe:	61 05       	cpc	r22, r1
 ac0:	08 94       	sec
 ac2:	08 95       	ret

00000ac4 <__fp_zero>:
 ac4:	e8 94       	clt

00000ac6 <__fp_szero>:
 ac6:	bb 27       	eor	r27, r27
 ac8:	66 27       	eor	r22, r22
 aca:	77 27       	eor	r23, r23
 acc:	cb 01       	movw	r24, r22
 ace:	97 f9       	bld	r25, 7
 ad0:	08 95       	ret

00000ad2 <__gesf2>:
 ad2:	8a df       	rcall	.-236    	; 0x9e8 <__fp_cmp>
 ad4:	08 f4       	brcc	.+2      	; 0xad8 <__gesf2+0x6>
 ad6:	8f ef       	ldi	r24, 0xFF	; 255
 ad8:	08 95       	ret

00000ada <__mulsf3>:
 ada:	0b d0       	rcall	.+22     	; 0xaf2 <__mulsf3x>
 adc:	c0 cf       	rjmp	.-128    	; 0xa5e <__fp_round>
 ade:	b1 df       	rcall	.-158    	; 0xa42 <__fp_pscA>
 ae0:	28 f0       	brcs	.+10     	; 0xaec <__mulsf3+0x12>
 ae2:	b6 df       	rcall	.-148    	; 0xa50 <__fp_pscB>
 ae4:	18 f0       	brcs	.+6      	; 0xaec <__mulsf3+0x12>
 ae6:	95 23       	and	r25, r21
 ae8:	09 f0       	breq	.+2      	; 0xaec <__mulsf3+0x12>
 aea:	a2 cf       	rjmp	.-188    	; 0xa30 <__fp_inf>
 aec:	a7 cf       	rjmp	.-178    	; 0xa3c <__fp_nan>
 aee:	11 24       	eor	r1, r1
 af0:	ea cf       	rjmp	.-44     	; 0xac6 <__fp_szero>

00000af2 <__mulsf3x>:
 af2:	c6 df       	rcall	.-116    	; 0xa80 <__fp_split3>
 af4:	a0 f3       	brcs	.-24     	; 0xade <__mulsf3+0x4>

00000af6 <__mulsf3_pse>:
 af6:	95 9f       	mul	r25, r21
 af8:	d1 f3       	breq	.-12     	; 0xaee <__mulsf3+0x14>
 afa:	95 0f       	add	r25, r21
 afc:	50 e0       	ldi	r21, 0x00	; 0
 afe:	55 1f       	adc	r21, r21
 b00:	62 9f       	mul	r22, r18
 b02:	f0 01       	movw	r30, r0
 b04:	72 9f       	mul	r23, r18
 b06:	bb 27       	eor	r27, r27
 b08:	f0 0d       	add	r31, r0
 b0a:	b1 1d       	adc	r27, r1
 b0c:	63 9f       	mul	r22, r19
 b0e:	aa 27       	eor	r26, r26
 b10:	f0 0d       	add	r31, r0
 b12:	b1 1d       	adc	r27, r1
 b14:	aa 1f       	adc	r26, r26
 b16:	64 9f       	mul	r22, r20
 b18:	66 27       	eor	r22, r22
 b1a:	b0 0d       	add	r27, r0
 b1c:	a1 1d       	adc	r26, r1
 b1e:	66 1f       	adc	r22, r22
 b20:	82 9f       	mul	r24, r18
 b22:	22 27       	eor	r18, r18
 b24:	b0 0d       	add	r27, r0
 b26:	a1 1d       	adc	r26, r1
 b28:	62 1f       	adc	r22, r18
 b2a:	73 9f       	mul	r23, r19
 b2c:	b0 0d       	add	r27, r0
 b2e:	a1 1d       	adc	r26, r1
 b30:	62 1f       	adc	r22, r18
 b32:	83 9f       	mul	r24, r19
 b34:	a0 0d       	add	r26, r0
 b36:	61 1d       	adc	r22, r1
 b38:	22 1f       	adc	r18, r18
 b3a:	74 9f       	mul	r23, r20
 b3c:	33 27       	eor	r19, r19
 b3e:	a0 0d       	add	r26, r0
 b40:	61 1d       	adc	r22, r1
 b42:	23 1f       	adc	r18, r19
 b44:	84 9f       	mul	r24, r20
 b46:	60 0d       	add	r22, r0
 b48:	21 1d       	adc	r18, r1
 b4a:	82 2f       	mov	r24, r18
 b4c:	76 2f       	mov	r23, r22
 b4e:	6a 2f       	mov	r22, r26
 b50:	11 24       	eor	r1, r1
 b52:	9f 57       	subi	r25, 0x7F	; 127
 b54:	50 40       	sbci	r21, 0x00	; 0
 b56:	8a f0       	brmi	.+34     	; 0xb7a <__mulsf3_pse+0x84>
 b58:	e1 f0       	breq	.+56     	; 0xb92 <__mulsf3_pse+0x9c>
 b5a:	88 23       	and	r24, r24
 b5c:	4a f0       	brmi	.+18     	; 0xb70 <__mulsf3_pse+0x7a>
 b5e:	ee 0f       	add	r30, r30
 b60:	ff 1f       	adc	r31, r31
 b62:	bb 1f       	adc	r27, r27
 b64:	66 1f       	adc	r22, r22
 b66:	77 1f       	adc	r23, r23
 b68:	88 1f       	adc	r24, r24
 b6a:	91 50       	subi	r25, 0x01	; 1
 b6c:	50 40       	sbci	r21, 0x00	; 0
 b6e:	a9 f7       	brne	.-22     	; 0xb5a <__mulsf3_pse+0x64>
 b70:	9e 3f       	cpi	r25, 0xFE	; 254
 b72:	51 05       	cpc	r21, r1
 b74:	70 f0       	brcs	.+28     	; 0xb92 <__mulsf3_pse+0x9c>
 b76:	5c cf       	rjmp	.-328    	; 0xa30 <__fp_inf>
 b78:	a6 cf       	rjmp	.-180    	; 0xac6 <__fp_szero>
 b7a:	5f 3f       	cpi	r21, 0xFF	; 255
 b7c:	ec f3       	brlt	.-6      	; 0xb78 <__mulsf3_pse+0x82>
 b7e:	98 3e       	cpi	r25, 0xE8	; 232
 b80:	dc f3       	brlt	.-10     	; 0xb78 <__mulsf3_pse+0x82>
 b82:	86 95       	lsr	r24
 b84:	77 95       	ror	r23
 b86:	67 95       	ror	r22
 b88:	b7 95       	ror	r27
 b8a:	f7 95       	ror	r31
 b8c:	e7 95       	ror	r30
 b8e:	9f 5f       	subi	r25, 0xFF	; 255
 b90:	c1 f7       	brne	.-16     	; 0xb82 <__mulsf3_pse+0x8c>
 b92:	fe 2b       	or	r31, r30
 b94:	88 0f       	add	r24, r24
 b96:	91 1d       	adc	r25, r1
 b98:	96 95       	lsr	r25
 b9a:	87 95       	ror	r24
 b9c:	97 f9       	bld	r25, 7
 b9e:	08 95       	ret

00000ba0 <__divmodhi4>:
 ba0:	97 fb       	bst	r25, 7
 ba2:	09 2e       	mov	r0, r25
 ba4:	07 26       	eor	r0, r23
 ba6:	0a d0       	rcall	.+20     	; 0xbbc <__divmodhi4_neg1>
 ba8:	77 fd       	sbrc	r23, 7
 baa:	04 d0       	rcall	.+8      	; 0xbb4 <__divmodhi4_neg2>
 bac:	0c d0       	rcall	.+24     	; 0xbc6 <__udivmodhi4>
 bae:	06 d0       	rcall	.+12     	; 0xbbc <__divmodhi4_neg1>
 bb0:	00 20       	and	r0, r0
 bb2:	1a f4       	brpl	.+6      	; 0xbba <__divmodhi4_exit>

00000bb4 <__divmodhi4_neg2>:
 bb4:	70 95       	com	r23
 bb6:	61 95       	neg	r22
 bb8:	7f 4f       	sbci	r23, 0xFF	; 255

00000bba <__divmodhi4_exit>:
 bba:	08 95       	ret

00000bbc <__divmodhi4_neg1>:
 bbc:	f6 f7       	brtc	.-4      	; 0xbba <__divmodhi4_exit>
 bbe:	90 95       	com	r25
 bc0:	81 95       	neg	r24
 bc2:	9f 4f       	sbci	r25, 0xFF	; 255
 bc4:	08 95       	ret

00000bc6 <__udivmodhi4>:
 bc6:	aa 1b       	sub	r26, r26
 bc8:	bb 1b       	sub	r27, r27
 bca:	51 e1       	ldi	r21, 0x11	; 17
 bcc:	07 c0       	rjmp	.+14     	; 0xbdc <__udivmodhi4_ep>

00000bce <__udivmodhi4_loop>:
 bce:	aa 1f       	adc	r26, r26
 bd0:	bb 1f       	adc	r27, r27
 bd2:	a6 17       	cp	r26, r22
 bd4:	b7 07       	cpc	r27, r23
 bd6:	10 f0       	brcs	.+4      	; 0xbdc <__udivmodhi4_ep>
 bd8:	a6 1b       	sub	r26, r22
 bda:	b7 0b       	sbc	r27, r23

00000bdc <__udivmodhi4_ep>:
 bdc:	88 1f       	adc	r24, r24
 bde:	99 1f       	adc	r25, r25
 be0:	5a 95       	dec	r21
 be2:	a9 f7       	brne	.-22     	; 0xbce <__udivmodhi4_loop>
 be4:	80 95       	com	r24
 be6:	90 95       	com	r25
 be8:	bc 01       	movw	r22, r24
 bea:	cd 01       	movw	r24, r26
 bec:	08 95       	ret

00000bee <__eerd_byte_m16>:
 bee:	e1 99       	sbic	0x1c, 1	; 28
 bf0:	fe cf       	rjmp	.-4      	; 0xbee <__eerd_byte_m16>
 bf2:	9f bb       	out	0x1f, r25	; 31
 bf4:	8e bb       	out	0x1e, r24	; 30
 bf6:	e0 9a       	sbi	0x1c, 0	; 28
 bf8:	99 27       	eor	r25, r25
 bfa:	8d b3       	in	r24, 0x1d	; 29
 bfc:	08 95       	ret

00000bfe <__eewr_byte_m16>:
 bfe:	26 2f       	mov	r18, r22

00000c00 <__eewr_r18_m16>:
 c00:	e1 99       	sbic	0x1c, 1	; 28
 c02:	fe cf       	rjmp	.-4      	; 0xc00 <__eewr_r18_m16>
 c04:	9f bb       	out	0x1f, r25	; 31
 c06:	8e bb       	out	0x1e, r24	; 30
 c08:	2d bb       	out	0x1d, r18	; 29
 c0a:	0f b6       	in	r0, 0x3f	; 63
 c0c:	f8 94       	cli
 c0e:	e2 9a       	sbi	0x1c, 2	; 28
 c10:	e1 9a       	sbi	0x1c, 1	; 28
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	01 96       	adiw	r24, 0x01	; 1
 c16:	08 95       	ret

00000c18 <_exit>:
 c18:	f8 94       	cli

00000c1a <__stop_program>:
 c1a:	ff cf       	rjmp	.-2      	; 0xc1a <__stop_program>
